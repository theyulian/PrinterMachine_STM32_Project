
ComunicacionUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080091b0  080091b0  000191b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800931c  0800931c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800931c  0800931c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800931c  0800931c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001390  200001e0  08009504  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001570  08009504  00021570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019324  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ab  00000000  00000000  0003952d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  0003de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0ce  00000000  00000000  0003ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001534b  00000000  00000000  00059f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092319  00000000  00000000  0006f289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001015a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  001015f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009198 	.word	0x08009198

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009198 	.word	0x08009198

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcca 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82c 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f988 	bl	800046c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f008 faa6 	bl	80086ac <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000160:	f000 f8aa 	bl	80002b8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000164:	f000 f91e 	bl	80003a4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000168:	f000 f880 	bl	800026c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800016c:	2100      	movs	r1, #0
 800016e:	480c      	ldr	r0, [pc, #48]	; (80001a0 <main+0x54>)
 8000170:	f003 fd6c 	bl	8003c4c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000174:	480b      	ldr	r0, [pc, #44]	; (80001a4 <main+0x58>)
 8000176:	f003 fcbf 	bl	8003af8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 800017a:	480b      	ldr	r0, [pc, #44]	; (80001a8 <main+0x5c>)
 800017c:	f000 fe12 	bl	8000da4 <HAL_ADC_Start>
  TIM2->CCR1 = 50;
 8000180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000184:	2232      	movs	r2, #50	; 0x32
 8000186:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  valorADC = HAL_ADC_GetValue(&hadc1);
 8000188:	4807      	ldr	r0, [pc, #28]	; (80001a8 <main+0x5c>)
 800018a:	f000 feb9 	bl	8000f00 <HAL_ADC_GetValue>
 800018e:	4603      	mov	r3, r0
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <main+0x60>)
 8000192:	6013      	str	r3, [r2, #0]
	  /*sprintf(texto,"El contador es %d",contador);
	  CDC_Transmit_FS(texto,strlen(texto));
	  contador++;*/
	  HAL_Delay(1000);
 8000194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000198:	f000 fd08 	bl	8000bac <HAL_Delay>
	  valorADC = HAL_ADC_GetValue(&hadc1);
 800019c:	e7f4      	b.n	8000188 <main+0x3c>
 800019e:	bf00      	nop
 80001a0:	20000594 	.word	0x20000594
 80001a4:	20000474 	.word	0x20000474
 80001a8:	200004f4 	.word	0x200004f4
 80001ac:	20000444 	.word	0x20000444

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b094      	sub	sp, #80	; 0x50
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f008 ff52 	bl	8009068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
 80001d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000206:	4618      	mov	r0, r3
 8000208:	f002 ff88 	bl	800311c <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000212:	f000 fb0b 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	230f      	movs	r3, #15
 8000218:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000226:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f003 f9f2 	bl	800361c <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023e:	f000 faf5 	bl	800082c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000242:	2312      	movs	r3, #18
 8000244:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800024a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	4618      	mov	r0, r3
 8000254:	f003 fb4a 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800025e:	f000 fae5 	bl	800082c <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3750      	adds	r7, #80	; 0x50
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_ADC1_Init+0x44>)
 8000272:	4a10      	ldr	r2, [pc, #64]	; (80002b4 <MX_ADC1_Init+0x48>)
 8000274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_ADC1_Init+0x44>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_ADC1_Init+0x44>)
 800027e:	2201      	movs	r2, #1
 8000280:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_ADC1_Init+0x44>)
 8000284:	2200      	movs	r2, #0
 8000286:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_ADC1_Init+0x44>)
 800028a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800028e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <MX_ADC1_Init+0x44>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_ADC1_Init+0x44>)
 8000298:	2201      	movs	r2, #1
 800029a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <MX_ADC1_Init+0x44>)
 800029e:	f000 fca9 	bl	8000bf4 <HAL_ADC_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 80002a8:	f000 fac0 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200004f4 	.word	0x200004f4
 80002b4:	40012400 	.word	0x40012400

080002b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08e      	sub	sp, #56	; 0x38
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	f107 0320 	add.w	r3, r7, #32
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
 80002e4:	615a      	str	r2, [r3, #20]
 80002e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e8:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <MX_TIM2_Init+0xe8>)
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80002f0:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <MX_TIM2_Init+0xe8>)
 80002f2:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80002f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <MX_TIM2_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80002fe:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <MX_TIM2_Init+0xe8>)
 8000300:	2264      	movs	r2, #100	; 0x64
 8000302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <MX_TIM2_Init+0xe8>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <MX_TIM2_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000310:	4823      	ldr	r0, [pc, #140]	; (80003a0 <MX_TIM2_Init+0xe8>)
 8000312:	f003 fba1 	bl	8003a58 <HAL_TIM_Base_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800031c:	f000 fa86 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032a:	4619      	mov	r1, r3
 800032c:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_TIM2_Init+0xe8>)
 800032e:	f003 fef5 	bl	800411c <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000338:	f000 fa78 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800033c:	4818      	ldr	r0, [pc, #96]	; (80003a0 <MX_TIM2_Init+0xe8>)
 800033e:	f003 fc2d 	bl	8003b9c <HAL_TIM_PWM_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000348:	f000 fa70 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034c:	2300      	movs	r3, #0
 800034e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000354:	f107 0320 	add.w	r3, r7, #32
 8000358:	4619      	mov	r1, r3
 800035a:	4811      	ldr	r0, [pc, #68]	; (80003a0 <MX_TIM2_Init+0xe8>)
 800035c:	f004 fb3a 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000366:	f000 fa61 	bl	800082c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800036a:	2360      	movs	r3, #96	; 0x60
 800036c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	4807      	ldr	r0, [pc, #28]	; (80003a0 <MX_TIM2_Init+0xe8>)
 8000382:	f003 fe0d 	bl	8003fa0 <HAL_TIM_PWM_ConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800038c:	f000 fa4e 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000390:	4803      	ldr	r0, [pc, #12]	; (80003a0 <MX_TIM2_Init+0xe8>)
 8000392:	f000 faff 	bl	8000994 <HAL_TIM_MspPostInit>

}
 8000396:	bf00      	nop
 8000398:	3738      	adds	r7, #56	; 0x38
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000594 	.word	0x20000594

080003a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08c      	sub	sp, #48	; 0x30
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0320 	add.w	r3, r7, #32
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003b8:	f107 030c 	add.w	r3, r7, #12
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <MX_TIM4_Init+0xc0>)
 80003d2:	4a25      	ldr	r2, [pc, #148]	; (8000468 <MX_TIM4_Init+0xc4>)
 80003d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000;
 80003d6:	4b23      	ldr	r3, [pc, #140]	; (8000464 <MX_TIM4_Init+0xc0>)
 80003d8:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80003dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <MX_TIM4_Init+0xc0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 80003e4:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <MX_TIM4_Init+0xc0>)
 80003e6:	2202      	movs	r2, #2
 80003e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_TIM4_Init+0xc0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <MX_TIM4_Init+0xc0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003f6:	481b      	ldr	r0, [pc, #108]	; (8000464 <MX_TIM4_Init+0xc0>)
 80003f8:	f003 fb2e 	bl	8003a58 <HAL_TIM_Base_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000402:	f000 fa13 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800040c:	f107 0320 	add.w	r3, r7, #32
 8000410:	4619      	mov	r1, r3
 8000412:	4814      	ldr	r0, [pc, #80]	; (8000464 <MX_TIM4_Init+0xc0>)
 8000414:	f003 fe82 	bl	800411c <HAL_TIM_ConfigClockSource>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800041e:	f000 fa05 	bl	800082c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	4619      	mov	r1, r3
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <MX_TIM4_Init+0xc0>)
 8000432:	f003 ff37 	bl	80042a4 <HAL_TIM_SlaveConfigSynchro>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800043c:	f000 f9f6 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000440:	2300      	movs	r3, #0
 8000442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_TIM4_Init+0xc0>)
 800044e:	f004 fac1 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8000458:	f000 f9e8 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3730      	adds	r7, #48	; 0x30
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000474 	.word	0x20000474
 8000468:	40000800 	.word	0x40000800

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <MX_GPIO_Init+0xec>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a34      	ldr	r2, [pc, #208]	; (8000558 <MX_GPIO_Init+0xec>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <MX_GPIO_Init+0xec>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <MX_GPIO_Init+0xec>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a2e      	ldr	r2, [pc, #184]	; (8000558 <MX_GPIO_Init+0xec>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <MX_GPIO_Init+0xec>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b29      	ldr	r3, [pc, #164]	; (8000558 <MX_GPIO_Init+0xec>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a28      	ldr	r2, [pc, #160]	; (8000558 <MX_GPIO_Init+0xec>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <MX_GPIO_Init+0xec>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <MX_GPIO_Init+0xec>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a22      	ldr	r2, [pc, #136]	; (8000558 <MX_GPIO_Init+0xec>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_GPIO_Init+0xec>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	481d      	ldr	r0, [pc, #116]	; (800055c <MX_GPIO_Init+0xf0>)
 80004e8:	f001 f922 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4815      	ldr	r0, [pc, #84]	; (800055c <MX_GPIO_Init+0xf0>)
 8000506:	f000 ff8f 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 800050a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_GPIO_Init+0xf4>)
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000514:	2301      	movs	r3, #1
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	480f      	ldr	r0, [pc, #60]	; (800055c <MX_GPIO_Init+0xf0>)
 8000520:	f000 ff82 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8000524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <MX_GPIO_Init+0xf8>)
 800053a:	f000 ff75 	bl	8001428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2028      	movs	r0, #40	; 0x28
 8000544:	f000 ff39 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000548:	2028      	movs	r0, #40	; 0x28
 800054a:	f000 ff52 	bl	80013f2 <HAL_NVIC_EnableIRQ>

}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	40011000 	.word	0x40011000
 8000560:	10110000 	.word	0x10110000
 8000564:	40010c00 	.word	0x40010c00

08000568 <CDC_Receive_Callback>:




void CDC_Receive_Callback(uint8_t* Buf, uint32_t Len)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]



	if(Buf[0]=='a'){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b61      	cmp	r3, #97	; 0x61
 8000578:	d102      	bne.n	8000580 <CDC_Receive_Callback+0x18>
		enviarPro();
 800057a:	f000 f8e3 	bl	8000744 <enviarPro>
			}
		}
		memset(arr,0,32);
	}

}
 800057e:	e098      	b.n	80006b2 <CDC_Receive_Callback+0x14a>
		memcpy(arr,Buf,Len);
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	484d      	ldr	r0, [pc, #308]	; (80006bc <CDC_Receive_Callback+0x154>)
 8000586:	f008 fd61 	bl	800904c <memcpy>
		if(arr[0]=='2'){
 800058a:	4b4c      	ldr	r3, [pc, #304]	; (80006bc <CDC_Receive_Callback+0x154>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b32      	cmp	r3, #50	; 0x32
 8000590:	f040 808a 	bne.w	80006a8 <CDC_Receive_Callback+0x140>
			memset(tamaux,0,5);
 8000594:	2205      	movs	r2, #5
 8000596:	2100      	movs	r1, #0
 8000598:	4849      	ldr	r0, [pc, #292]	; (80006c0 <CDC_Receive_Callback+0x158>)
 800059a:	f008 fd65 	bl	8009068 <memset>
			tamaux[0]=arr[1];
 800059e:	4b47      	ldr	r3, [pc, #284]	; (80006bc <CDC_Receive_Callback+0x154>)
 80005a0:	785a      	ldrb	r2, [r3, #1]
 80005a2:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <CDC_Receive_Callback+0x158>)
 80005a4:	701a      	strb	r2, [r3, #0]
			tamaux[1]=arr[2];
 80005a6:	4b45      	ldr	r3, [pc, #276]	; (80006bc <CDC_Receive_Callback+0x154>)
 80005a8:	789a      	ldrb	r2, [r3, #2]
 80005aa:	4b45      	ldr	r3, [pc, #276]	; (80006c0 <CDC_Receive_Callback+0x158>)
 80005ac:	705a      	strb	r2, [r3, #1]
			tamaux[2]=arr[3];
 80005ae:	4b43      	ldr	r3, [pc, #268]	; (80006bc <CDC_Receive_Callback+0x154>)
 80005b0:	78da      	ldrb	r2, [r3, #3]
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <CDC_Receive_Callback+0x158>)
 80005b4:	709a      	strb	r2, [r3, #2]
			tam=atoi(tamaux);
 80005b6:	4842      	ldr	r0, [pc, #264]	; (80006c0 <CDC_Receive_Callback+0x158>)
 80005b8:	f008 fd1a 	bl	8008ff0 <atoi>
 80005bc:	4603      	mov	r3, r0
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <CDC_Receive_Callback+0x15c>)
 80005c2:	701a      	strb	r2, [r3, #0]
			if(arr[tam-1]=='3'){
 80005c4:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <CDC_Receive_Callback+0x15c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	4a3c      	ldr	r2, [pc, #240]	; (80006bc <CDC_Receive_Callback+0x154>)
 80005cc:	5cd3      	ldrb	r3, [r2, r3]
 80005ce:	2b33      	cmp	r3, #51	; 0x33
 80005d0:	d16a      	bne.n	80006a8 <CDC_Receive_Callback+0x140>
				memset(arrdat,0,32);
 80005d2:	2220      	movs	r2, #32
 80005d4:	2100      	movs	r1, #0
 80005d6:	483c      	ldr	r0, [pc, #240]	; (80006c8 <CDC_Receive_Callback+0x160>)
 80005d8:	f008 fd46 	bl	8009068 <memset>
				memset(arrpar,0,32);
 80005dc:	2220      	movs	r2, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	483a      	ldr	r0, [pc, #232]	; (80006cc <CDC_Receive_Callback+0x164>)
 80005e2:	f008 fd41 	bl	8009068 <memset>
				for(i=4;i<((tam-1-4)/2)+4;i++){
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <CDC_Receive_Callback+0x168>)
 80005e8:	2204      	movs	r2, #4
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	e00d      	b.n	800060a <CDC_Receive_Callback+0xa2>
					arrdat[i-4]=arr[i];
 80005ee:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <CDC_Receive_Callback+0x168>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <CDC_Receive_Callback+0x168>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b04      	subs	r3, #4
 80005f8:	4930      	ldr	r1, [pc, #192]	; (80006bc <CDC_Receive_Callback+0x154>)
 80005fa:	5c89      	ldrb	r1, [r1, r2]
 80005fc:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <CDC_Receive_Callback+0x160>)
 80005fe:	54d1      	strb	r1, [r2, r3]
				for(i=4;i<((tam-1-4)/2)+4;i++){
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <CDC_Receive_Callback+0x168>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a32      	ldr	r2, [pc, #200]	; (80006d0 <CDC_Receive_Callback+0x168>)
 8000608:	6013      	str	r3, [r2, #0]
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <CDC_Receive_Callback+0x15c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3b05      	subs	r3, #5
 8000610:	0fda      	lsrs	r2, r3, #31
 8000612:	4413      	add	r3, r2
 8000614:	105b      	asrs	r3, r3, #1
 8000616:	3304      	adds	r3, #4
 8000618:	461a      	mov	r2, r3
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <CDC_Receive_Callback+0x168>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d8e5      	bhi.n	80005ee <CDC_Receive_Callback+0x86>
				aux=0;
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <CDC_Receive_Callback+0x16c>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
				for(i=((tam-1-4)/2)+4;i<tam-1;i++){
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <CDC_Receive_Callback+0x15c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3b05      	subs	r3, #5
 800062e:	0fda      	lsrs	r2, r3, #31
 8000630:	4413      	add	r3, r2
 8000632:	105b      	asrs	r3, r3, #1
 8000634:	3304      	adds	r3, #4
 8000636:	461a      	mov	r2, r3
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <CDC_Receive_Callback+0x168>)
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	e011      	b.n	8000662 <CDC_Receive_Callback+0xfa>
					arrpar[aux]=arr[i];
 800063e:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <CDC_Receive_Callback+0x168>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <CDC_Receive_Callback+0x16c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	491d      	ldr	r1, [pc, #116]	; (80006bc <CDC_Receive_Callback+0x154>)
 8000648:	5c89      	ldrb	r1, [r1, r2]
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <CDC_Receive_Callback+0x164>)
 800064c:	54d1      	strb	r1, [r2, r3]
					aux++;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <CDC_Receive_Callback+0x16c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <CDC_Receive_Callback+0x16c>)
 8000656:	6013      	str	r3, [r2, #0]
				for(i=((tam-1-4)/2)+4;i<tam-1;i++){
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <CDC_Receive_Callback+0x168>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <CDC_Receive_Callback+0x168>)
 8000660:	6013      	str	r3, [r2, #0]
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <CDC_Receive_Callback+0x15c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	461a      	mov	r2, r3
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <CDC_Receive_Callback+0x168>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	429a      	cmp	r2, r3
 8000670:	d8e5      	bhi.n	800063e <CDC_Receive_Callback+0xd6>
				valorPWM=atoi(arrdat);
 8000672:	4815      	ldr	r0, [pc, #84]	; (80006c8 <CDC_Receive_Callback+0x160>)
 8000674:	f008 fcbc 	bl	8008ff0 <atoi>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <CDC_Receive_Callback+0x170>)
 800067e:	601a      	str	r2, [r3, #0]
				paridad=atoi(arrpar);
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <CDC_Receive_Callback+0x164>)
 8000682:	f008 fcb5 	bl	8008ff0 <atoi>
 8000686:	4603      	mov	r3, r0
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <CDC_Receive_Callback+0x174>)
 800068c:	701a      	strb	r2, [r3, #0]
				if(paridad==valorPWM+5){
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <CDC_Receive_Callback+0x174>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <CDC_Receive_Callback+0x170>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3305      	adds	r3, #5
 800069a:	429a      	cmp	r2, r3
 800069c:	d104      	bne.n	80006a8 <CDC_Receive_Callback+0x140>
					TIM2->CCR1=valorPWM;
 800069e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <CDC_Receive_Callback+0x170>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6353      	str	r3, [r2, #52]	; 0x34
		memset(arr,0,32);
 80006a8:	2220      	movs	r2, #32
 80006aa:	2100      	movs	r1, #0
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <CDC_Receive_Callback+0x154>)
 80006ae:	f008 fcdb 	bl	8009068 <memset>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000044c 	.word	0x2000044c
 80006c0:	200004e0 	.word	0x200004e0
 80006c4:	200005e8 	.word	0x200005e8
 80006c8:	2000052c 	.word	0x2000052c
 80006cc:	20000424 	.word	0x20000424
 80006d0:	20000528 	.word	0x20000528
 80006d4:	200004ec 	.word	0x200004ec
 80006d8:	200001fc 	.word	0x200001fc
 80006dc:	20000524 	.word	0x20000524

080006e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){

	}
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
	...

080006f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Sensor_Pin){
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000704:	d113      	bne.n	800072e <HAL_GPIO_EXTI_Callback+0x3a>
		tiempo_anterior=tiempo_actual;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_GPIO_EXTI_Callback+0x44>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <HAL_GPIO_EXTI_Callback+0x48>)
 800070c:	6013      	str	r3, [r2, #0]
		tiempo_actual=HAL_GetTick();
 800070e:	f000 fa43 	bl	8000b98 <HAL_GetTick>
 8000712:	4603      	mov	r3, r0
 8000714:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_GPIO_EXTI_Callback+0x44>)
 8000716:	6013      	str	r3, [r2, #0]
		rpm=30000/(tiempo_actual-tiempo_anterior);
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <HAL_GPIO_EXTI_Callback+0x44>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_GPIO_EXTI_Callback+0x48>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	f247 5230 	movw	r2, #30000	; 0x7530
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <HAL_GPIO_EXTI_Callback+0x4c>)
 800072c:	6013      	str	r3, [r2, #0]
	}
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200004e8 	.word	0x200004e8
 800073c:	20000448 	.word	0x20000448
 8000740:	2000054c 	.word	0x2000054c

08000744 <enviarPro>:

void enviarPro()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	data();
 8000748:	f000 f848 	bl	80007dc <data>
	env[0]=0x02;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <enviarPro+0x84>)
 800074e:	2202      	movs	r2, #2
 8000750:	701a      	strb	r2, [r3, #0]
	env[1]=0x04;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <enviarPro+0x84>)
 8000754:	2204      	movs	r2, #4
 8000756:	705a      	strb	r2, [r3, #1]
	env[2]=dat1;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <enviarPro+0x88>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <enviarPro+0x84>)
 8000760:	709a      	strb	r2, [r3, #2]
	env[3]=dat2;
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <enviarPro+0x8c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <enviarPro+0x84>)
 800076a:	70da      	strb	r2, [r3, #3]
	env[4]=dat3;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <enviarPro+0x90>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <enviarPro+0x84>)
 8000774:	711a      	strb	r2, [r3, #4]
	env[5]=dat4;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <enviarPro+0x94>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <enviarPro+0x84>)
 800077e:	715a      	strb	r2, [r3, #5]
	env[6]=env[0]+env[2]+env[3]+env[4]+env[5] + 0x03;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <enviarPro+0x84>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <enviarPro+0x84>)
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	4413      	add	r3, r2
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <enviarPro+0x84>)
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	4413      	add	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <enviarPro+0x84>)
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	4413      	add	r3, r2
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <enviarPro+0x84>)
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	4413      	add	r3, r2
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3303      	adds	r3, #3
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <enviarPro+0x84>)
 80007aa:	719a      	strb	r2, [r3, #6]
	env[7]=0x03;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <enviarPro+0x84>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	71da      	strb	r2, [r3, #7]

	CDC_Transmit_FS(env,33);
 80007b2:	2121      	movs	r1, #33	; 0x21
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <enviarPro+0x84>)
 80007b6:	f008 f83d 	bl	8008834 <CDC_Transmit_FS>
	memset(env,0,33);
 80007ba:	2221      	movs	r2, #33	; 0x21
 80007bc:	2100      	movs	r1, #0
 80007be:	4802      	ldr	r0, [pc, #8]	; (80007c8 <enviarPro+0x84>)
 80007c0:	f008 fc52 	bl	8009068 <memset>

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000574 	.word	0x20000574
 80007cc:	200005e0 	.word	0x200005e0
 80007d0:	200005e4 	.word	0x200005e4
 80007d4:	200004bc 	.word	0x200004bc
 80007d8:	20000470 	.word	0x20000470

080007dc <data>:

void data(){
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	dat1=rpm>>24;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <data+0x3c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	0e1b      	lsrs	r3, r3, #24
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <data+0x40>)
 80007ea:	601a      	str	r2, [r3, #0]
	dat2=rpm>>16;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <data+0x3c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <data+0x44>)
 80007f6:	601a      	str	r2, [r3, #0]
	dat3=rpm>>8;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <data+0x3c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	461a      	mov	r2, r3
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <data+0x48>)
 8000802:	601a      	str	r2, [r3, #0]
	dat4=rpm;
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <data+0x3c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <data+0x4c>)
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	2000054c 	.word	0x2000054c
 800081c:	200005e0 	.word	0x200005e0
 8000820:	200005e4 	.word	0x200005e4
 8000824:	200004bc 	.word	0x200004bc
 8000828:	20000470 	.word	0x20000470

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_MspInit+0x5c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_MspInit+0x5c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_MspInit+0x5c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x5c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_MspInit+0x60>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_MspInit+0x60>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000
 8000898:	40010000 	.word	0x40010000

0800089c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <HAL_ADC_MspInit+0x7c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d129      	bne.n	8000910 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_ADC_MspInit+0x80>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a16      	ldr	r2, [pc, #88]	; (800091c <HAL_ADC_MspInit+0x80>)
 80008c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_ADC_MspInit+0x80>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_ADC_MspInit+0x80>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_ADC_MspInit+0x80>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_ADC_MspInit+0x80>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f0:	2303      	movs	r3, #3
 80008f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4809      	ldr	r0, [pc, #36]	; (8000920 <HAL_ADC_MspInit+0x84>)
 80008fc:	f000 fd94 	bl	8001428 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2012      	movs	r0, #18
 8000906:	f000 fd58 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800090a:	2012      	movs	r0, #18
 800090c:	f000 fd71 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40012400 	.word	0x40012400
 800091c:	40021000 	.word	0x40021000
 8000920:	40010800 	.word	0x40010800

08000924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000934:	d10c      	bne.n	8000950 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_TIM_Base_MspInit+0x68>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <HAL_TIM_Base_MspInit+0x68>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_TIM_Base_MspInit+0x68>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800094e:	e018      	b.n	8000982 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_TIM_Base_MspInit+0x6c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d113      	bne.n	8000982 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_TIM_Base_MspInit+0x68>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_TIM_Base_MspInit+0x68>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_TIM_Base_MspInit+0x68>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	201e      	movs	r0, #30
 8000978:	f000 fd1f 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800097c:	201e      	movs	r0, #30
 800097e:	f000 fd38 	bl	80013f2 <HAL_NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40000800 	.word	0x40000800

08000994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b2:	d117      	bne.n	80009e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_TIM_MspPostInit+0x58>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <HAL_TIM_MspPostInit+0x58>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_TIM_MspPostInit+0x58>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <HAL_TIM_MspPostInit+0x5c>)
 80009e0:	f000 fd22 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3a:	f000 f89b 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <ADC1_2_IRQHandler+0x10>)
 8000a4a:	f000 fa65 	bl	8000f18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200004f4 	.word	0x200004f4

08000a58 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a5e:	f000 ffc8 	bl	80019f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20001284 	.word	0x20001284

08000a6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM4_IRQHandler+0x10>)
 8000a72:	f003 f98d 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000474 	.word	0x20000474

08000a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sensor_Pin);
 8000a84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a88:	f000 fe6a 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ac2:	f7ff ffe5 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f008 fa9d 	bl	8009004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fb3f 	bl	800014c <main>
  bx lr
 8000ace:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000ad8:	08009324 	.word	0x08009324
  ldr r2, =_sbss
 8000adc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000ae0:	20001570 	.word	0x20001570

08000ae4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <CAN1_RX1_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fc53 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe98 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fc6b 	bl	800140e <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 fc33 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x20>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	20000008 	.word	0x20000008
 8000b94:	200005ec 	.word	0x200005ec

08000b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	200005ec 	.word	0x200005ec

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff0 	bl	8000b98 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffe0 	bl	8000b98 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0be      	b.n	8000d94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe32 	bl	800089c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fa9d 	bl	8001178 <ADC_ConversionStop_Disable>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8099 	bne.w	8000d82 <HAL_ADC_Init+0x18e>
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8095 	bne.w	8000d82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c60:	f023 0302 	bic.w	r3, r3, #2
 8000c64:	f043 0202 	orr.w	r2, r3, #2
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b1b      	ldrb	r3, [r3, #12]
 8000c7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c8c:	d003      	beq.n	8000c96 <HAL_ADC_Init+0xa2>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d102      	bne.n	8000c9c <HAL_ADC_Init+0xa8>
 8000c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9a:	e000      	b.n	8000c9e <HAL_ADC_Init+0xaa>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7d1b      	ldrb	r3, [r3, #20]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d119      	bne.n	8000ce0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7b1b      	ldrb	r3, [r3, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	035a      	lsls	r2, r3, #13
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e00b      	b.n	8000ce0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	f043 0220 	orr.w	r2, r3, #32
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	f043 0201 	orr.w	r2, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <HAL_ADC_Init+0x1a8>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d10:	d003      	beq.n	8000d1a <HAL_ADC_Init+0x126>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d104      	bne.n	8000d24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	051b      	lsls	r3, r3, #20
 8000d22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_ADC_Init+0x1ac>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d10b      	bne.n	8000d60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d52:	f023 0303 	bic.w	r3, r3, #3
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5e:	e018      	b.n	8000d92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	f023 0312 	bic.w	r3, r3, #18
 8000d68:	f043 0210 	orr.w	r2, r3, #16
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	f043 0201 	orr.w	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d80:	e007      	b.n	8000d92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000da0:	ff1f0efe 	.word	0xff1f0efe

08000da4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_ADC_Start+0x1a>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e098      	b.n	8000ef0 <HAL_ADC_Start+0x14c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f97c 	bl	80010c4 <ADC_Enable>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8087 	bne.w	8000ee6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a41      	ldr	r2, [pc, #260]	; (8000ef8 <HAL_ADC_Start+0x154>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d105      	bne.n	8000e02 <HAL_ADC_Start+0x5e>
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <HAL_ADC_Start+0x158>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d115      	bne.n	8000e2e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d026      	beq.n	8000e6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e2c:	e01d      	b.n	8000e6a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <HAL_ADC_Start+0x158>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d004      	beq.n	8000e4e <HAL_ADC_Start+0xaa>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <HAL_ADC_Start+0x154>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10d      	bne.n	8000e6a <HAL_ADC_Start+0xc6>
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_ADC_Start+0x158>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f023 0206 	bic.w	r2, r3, #6
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e82:	e002      	b.n	8000e8a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f06f 0202 	mvn.w	r2, #2
 8000e9a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ea6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eaa:	d113      	bne.n	8000ed4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_ADC_Start+0x154>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d105      	bne.n	8000ec2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_ADC_Start+0x158>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d108      	bne.n	8000ed4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	e00c      	b.n	8000eee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	e003      	b.n	8000eee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40012800 	.word	0x40012800
 8000efc:	40012400 	.word	0x40012400

08000f00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	2b20      	cmp	r3, #32
 8000f2c:	d140      	bne.n	8000fb0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d139      	bne.n	8000fb0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f62:	d11d      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d119      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0220 	bic.w	r2, r2, #32
 8000f7a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f87c 	bl	800109e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f06f 0212 	mvn.w	r2, #18
 8000fae:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	2b80      	cmp	r3, #128	; 0x80
 8000fbc:	d14f      	bne.n	800105e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d148      	bne.n	800105e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000fee:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000ff2:	d012      	beq.n	800101a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d125      	bne.n	800104e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800100c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001010:	d11d      	bne.n	800104e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001016:	2b00      	cmp	r3, #0
 8001018:	d119      	bne.n	800104e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001028:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f8d3 	bl	80011fa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f06f 020c 	mvn.w	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001068:	2b40      	cmp	r3, #64	; 0x40
 800106a:	d114      	bne.n	8001096 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10d      	bne.n	8001096 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f812 	bl	80010b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f06f 0201 	mvn.w	r2, #1
 8001094:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
	...

080010c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d040      	beq.n	8001164 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0201 	orr.w	r2, r2, #1
 80010f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <ADC_Enable+0xac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <ADC_Enable+0xb0>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	0c9b      	lsrs	r3, r3, #18
 80010fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001100:	e002      	b.n	8001108 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3b01      	subs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f9      	bne.n	8001102 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800110e:	f7ff fd43 	bl	8000b98 <HAL_GetTick>
 8001112:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001114:	e01f      	b.n	8001156 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001116:	f7ff fd3f 	bl	8000b98 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d918      	bls.n	8001156 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b01      	cmp	r3, #1
 8001130:	d011      	beq.n	8001156 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e007      	b.n	8001166 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d1d8      	bne.n	8001116 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000
 8001174:	431bde83 	.word	0x431bde83

08001178 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b01      	cmp	r3, #1
 8001190:	d12e      	bne.n	80011f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011a2:	f7ff fcf9 	bl	8000b98 <HAL_GetTick>
 80011a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011a8:	e01b      	b.n	80011e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011aa:	f7ff fcf5 	bl	8000b98 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d914      	bls.n	80011e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10d      	bne.n	80011e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f043 0210 	orr.w	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e007      	b.n	80011f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d0dc      	beq.n	80011aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4906      	ldr	r1, [pc, #24]	; (80012a4 <__NVIC_EnableIRQ+0x34>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff90 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff2d 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff42 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff90 	bl	80012fc <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5f 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff35 	bl	8001270 <__NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffa2 	bl	8001360 <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e169      	b.n	8001710 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800143c:	2201      	movs	r2, #1
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8158 	bne.w	800170a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a9a      	ldr	r2, [pc, #616]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d05e      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001464:	4a98      	ldr	r2, [pc, #608]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d875      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800146a:	4a98      	ldr	r2, [pc, #608]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d058      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001470:	4a96      	ldr	r2, [pc, #600]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d86f      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001476:	4a96      	ldr	r2, [pc, #600]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d052      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 800147c:	4a94      	ldr	r2, [pc, #592]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d869      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001482:	4a94      	ldr	r2, [pc, #592]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d04c      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001488:	4a92      	ldr	r2, [pc, #584]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d863      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800148e:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d046      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001494:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d85d      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800149a:	2b12      	cmp	r3, #18
 800149c:	d82a      	bhi.n	80014f4 <HAL_GPIO_Init+0xcc>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d859      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <HAL_GPIO_Init+0x80>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	08001523 	.word	0x08001523
 80014ac:	080014fd 	.word	0x080014fd
 80014b0:	0800150f 	.word	0x0800150f
 80014b4:	08001551 	.word	0x08001551
 80014b8:	08001557 	.word	0x08001557
 80014bc:	08001557 	.word	0x08001557
 80014c0:	08001557 	.word	0x08001557
 80014c4:	08001557 	.word	0x08001557
 80014c8:	08001557 	.word	0x08001557
 80014cc:	08001557 	.word	0x08001557
 80014d0:	08001557 	.word	0x08001557
 80014d4:	08001557 	.word	0x08001557
 80014d8:	08001557 	.word	0x08001557
 80014dc:	08001557 	.word	0x08001557
 80014e0:	08001557 	.word	0x08001557
 80014e4:	08001557 	.word	0x08001557
 80014e8:	08001557 	.word	0x08001557
 80014ec:	08001505 	.word	0x08001505
 80014f0:	08001519 	.word	0x08001519
 80014f4:	4a79      	ldr	r2, [pc, #484]	; (80016dc <HAL_GPIO_Init+0x2b4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fa:	e02c      	b.n	8001556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e029      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	3304      	adds	r3, #4
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e024      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3308      	adds	r3, #8
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e01f      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	330c      	adds	r3, #12
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e01a      	b.n	8001558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152a:	2304      	movs	r3, #4
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e013      	b.n	8001558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001538:	2308      	movs	r3, #8
 800153a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	611a      	str	r2, [r3, #16]
          break;
 8001542:	e009      	b.n	8001558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	615a      	str	r2, [r3, #20]
          break;
 800154e:	e003      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x130>
          break;
 8001556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d801      	bhi.n	8001562 <HAL_GPIO_Init+0x13a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_Init+0x13e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3304      	adds	r3, #4
 8001566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d802      	bhi.n	8001574 <HAL_GPIO_Init+0x14c>
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x152>
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	3b08      	subs	r3, #8
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	210f      	movs	r1, #15
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	401a      	ands	r2, r3
 800158c:	6a39      	ldr	r1, [r7, #32]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b1 	beq.w	800170a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a8:	4b4d      	ldr	r3, [pc, #308]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2bc>)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <HAL_GPIO_Init+0x2c0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d013      	beq.n	8001614 <HAL_GPIO_Init+0x1ec>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_GPIO_Init+0x2c4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00d      	beq.n	8001610 <HAL_GPIO_Init+0x1e8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <HAL_GPIO_Init+0x2c8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d007      	beq.n	800160c <HAL_GPIO_Init+0x1e4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3d      	ldr	r2, [pc, #244]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_GPIO_Init+0x1e0>
 8001604:	2303      	movs	r3, #3
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001608:	2304      	movs	r3, #4
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001614:	2300      	movs	r3, #0
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001626:	492f      	ldr	r1, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x2bc>)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	492c      	ldr	r1, [pc, #176]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	4928      	ldr	r1, [pc, #160]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001658:	4013      	ands	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4922      	ldr	r1, [pc, #136]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	491e      	ldr	r1, [pc, #120]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	4918      	ldr	r1, [pc, #96]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4914      	ldr	r1, [pc, #80]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d021      	beq.n	80016fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	490e      	ldr	r1, [pc, #56]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	60cb      	str	r3, [r1, #12]
 80016c4:	e021      	b.n	800170a <HAL_GPIO_Init+0x2e2>
 80016c6:	bf00      	nop
 80016c8:	10320000 	.word	0x10320000
 80016cc:	10310000 	.word	0x10310000
 80016d0:	10220000 	.word	0x10220000
 80016d4:	10210000 	.word	0x10210000
 80016d8:	10120000 	.word	0x10120000
 80016dc:	10110000 	.word	0x10110000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	40011000 	.word	0x40011000
 80016f4:	40011400 	.word	0x40011400
 80016f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_GPIO_Init+0x304>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	43db      	mvns	r3, r3
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <HAL_GPIO_Init+0x304>)
 8001706:	4013      	ands	r3, r2
 8001708:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f ae8e 	bne.w	800143c <HAL_GPIO_Init+0x14>
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	372c      	adds	r7, #44	; 0x2c
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	611a      	str	r2, [r3, #16]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ffb8 	bl	80006f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	b08b      	sub	sp, #44	; 0x2c
 8001794:	af06      	add	r7, sp, #24
 8001796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0fd      	b.n	800199e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f007 f970 	bl	8008a9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2203      	movs	r2, #3
 80017c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f999 	bl	8004b00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	687e      	ldr	r6, [r7, #4]
 80017d6:	466d      	mov	r5, sp
 80017d8:	f106 0410 	add.w	r4, r6, #16
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	602b      	str	r3, [r5, #0]
 80017e4:	1d33      	adds	r3, r6, #4
 80017e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f003 f963 	bl	8004ab4 <USB_CoreInit>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0ce      	b.n	800199e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f003 f994 	bl	8004b34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e04c      	b.n	80018ac <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	3301      	adds	r3, #1
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	b298      	uxth	r0, r3
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3336      	adds	r3, #54	; 0x36
 8001850:	4602      	mov	r2, r0
 8001852:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3303      	adds	r3, #3
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3338      	adds	r3, #56	; 0x38
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	333c      	adds	r3, #60	; 0x3c
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3340      	adds	r3, #64	; 0x40
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3ad      	bcc.n	8001812 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e044      	b.n	8001946 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	3301      	adds	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	d3b5      	bcc.n	80018bc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	687e      	ldr	r6, [r7, #4]
 8001958:	466d      	mov	r5, sp
 800195a:	f106 0410 	add.w	r4, r6, #16
 800195e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	602b      	str	r3, [r5, #0]
 8001966:	1d33      	adds	r3, r6, #4
 8001968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f003 f8ee 	bl	8004b4c <USB_DevInit>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00d      	b.n	800199e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fa5f 	bl	8006e5a <USB_DevDisconnect>

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_Start+0x16>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e016      	b.n	80019ea <HAL_PCD_Start+0x44>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 f883 	bl	8004ad4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019ce:	2101      	movs	r1, #1
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f007 fad6 	bl	8008f82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 fa33 	bl	8006e46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b088      	sub	sp, #32
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fa35 	bl	8006e6e <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a0e:	d102      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fb61 	bl	80020d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fa27 	bl	8006e6e <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d112      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f007 f8a4 	bl	8008b92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f925 	bl	8001c9c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 fa09 	bl	8006e6e <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a66:	d10b      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f005 f9f2 	bl	8006e6e <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a94:	d10b      	bne.n	8001aae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 f9db 	bl	8006e6e <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac2:	d126      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	b292      	uxth	r2, r2
 8001ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0208 	bic.w	r2, r2, #8
 8001aee:	b292      	uxth	r2, r2
 8001af0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f007 f885 	bl	8008c04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f005 f9a9 	bl	8006e6e <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b26:	f040 8084 	bne.w	8001c32 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	77fb      	strb	r3, [r7, #31]
 8001b2e:	e011      	b.n	8001b54 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	7ffb      	ldrb	r3, [r7, #31]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	441a      	add	r2, r3
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	b292      	uxth	r2, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	f107 0120 	add.w	r1, r7, #32
 8001b48:	440b      	add	r3, r1
 8001b4a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	3301      	adds	r3, #1
 8001b52:	77fb      	strb	r3, [r7, #31]
 8001b54:	7ffb      	ldrb	r3, [r7, #31]
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	d9ea      	bls.n	8001b30 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0201 	bic.w	r2, r2, #1
 8001b84:	b292      	uxth	r2, r2
 8001b86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b8a:	bf00      	nop
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f6      	beq.n	8001b8c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	77fb      	strb	r3, [r7, #31]
 8001bba:	e010      	b.n	8001bde <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	7ffa      	ldrb	r2, [r7, #31]
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	440a      	add	r2, r1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	f107 0120 	add.w	r1, r7, #32
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bd6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bd8:	7ffb      	ldrb	r3, [r7, #31]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	77fb      	strb	r3, [r7, #31]
 8001bde:	7ffb      	ldrb	r3, [r7, #31]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d9eb      	bls.n	8001bbc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0208 	orr.w	r2, r2, #8
 8001bf6:	b292      	uxth	r2, r2
 8001bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0204 	orr.w	r2, r2, #4
 8001c26:	b292      	uxth	r2, r2
 8001c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f006 ffcf 	bl	8008bd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 f919 	bl	8006e6e <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c46:	d10e      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f006 ff88 	bl	8008b76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f005 f8ff 	bl	8006e6e <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7a:	d10b      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_SetAddress+0x1a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e013      	b.n	8001cde <HAL_PCD_SetAddress+0x42>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 f8a6 	bl	8006e20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	70fb      	strb	r3, [r7, #3]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	803b      	strh	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0e      	bge.n	8001d2a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	705a      	strb	r2, [r3, #1]
 8001d28:	e00e      	b.n	8001d48 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 0207 	and.w	r2, r3, #7
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d54:	883a      	ldrh	r2, [r7, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	78ba      	ldrb	r2, [r7, #2]
 8001d5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d102      	bne.n	8001d7e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_PCD_EP_Open+0xa6>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e00e      	b.n	8001daa <HAL_PCD_EP_Open+0xc4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fef6 	bl	8004b8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001da8:	7afb      	ldrb	r3, [r7, #11]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da0e      	bge.n	8001de4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	705a      	strb	r2, [r3, #1]
 8001de2:	e00e      	b.n	8001e02 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_PCD_EP_Close+0x6a>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e00e      	b.n	8001e3a <HAL_PCD_EP_Close+0x88>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fa18 	bl	8005260 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	f003 0207 	and.w	r2, r3, #7
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d106      	bne.n	8001ea6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fbca 	bl	8005638 <USB_EPStartXfer>
 8001ea4:	e005      	b.n	8001eb2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6979      	ldr	r1, [r7, #20]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fbc3 	bl	8005638 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 0207 	and.w	r2, r3, #7
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2201      	movs	r2, #1
 8001f34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f36:	7afb      	ldrb	r3, [r7, #11]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6979      	ldr	r1, [r7, #20]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fb70 	bl	8005638 <USB_EPStartXfer>
 8001f58:	e005      	b.n	8001f66 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fb69 	bl	8005638 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 0207 	and.w	r2, r3, #7
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d901      	bls.n	8001f8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e04c      	b.n	8002028 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da0e      	bge.n	8001fb4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	705a      	strb	r2, [r3, #1]
 8001fb2:	e00c      	b.n	8001fce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_EP_SetStall+0x7e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e01c      	b.n	8002028 <HAL_PCD_EP_SetStall+0xb8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 fe12 	bl	8006c26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f004 ff37 	bl	8006e8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e040      	b.n	80020d0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800204e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0e      	bge.n	8002074 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e00e      	b.n	8002092 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 0207 	and.w	r2, r3, #7
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_PCD_EP_ClrStall+0x82>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e00e      	b.n	80020d0 <HAL_PCD_EP_ClrStall+0xa0>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fe00 	bl	8006cc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020e0:	e2ec      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 8161 	bne.w	80023c4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002102:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d152      	bne.n	80021b2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211c:	81fb      	strh	r3, [r7, #14]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212c:	b29b      	uxth	r3, r3
 800212e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3328      	adds	r3, #40	; 0x28
 8002134:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	3302      	adds	r3, #2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	441a      	add	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002170:	2100      	movs	r1, #0
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f006 fce5 	bl	8008b42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 829b 	beq.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8296 	bne.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800219c:	b2da      	uxtb	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b292      	uxth	r2, r2
 80021a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021b0:	e284      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d034      	beq.n	8002236 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	3306      	adds	r3, #6
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800220a:	b29b      	uxth	r3, r3
 800220c:	f004 fe8e 	bl	8006f2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29a      	uxth	r2, r3
 8002218:	f640 738f 	movw	r3, #3983	; 0xf8f
 800221c:	4013      	ands	r3, r2
 800221e:	823b      	strh	r3, [r7, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	8a3a      	ldrh	r2, [r7, #16]
 8002226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222a:	b292      	uxth	r2, r2
 800222c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 fc5a 	bl	8008ae8 <HAL_PCD_SetupStageCallback>
 8002234:	e242      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002236:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800223a:	2b00      	cmp	r3, #0
 800223c:	f280 823e 	bge.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	f640 738f 	movw	r3, #3983	; 0xf8f
 800224c:	4013      	ands	r3, r2
 800224e:	83bb      	strh	r3, [r7, #28]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	8bba      	ldrh	r2, [r7, #28]
 8002256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225a:	b292      	uxth	r2, r2
 800225c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	3306      	adds	r3, #6
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x1ee>
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d015      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	6959      	ldr	r1, [r3, #20]
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f004 fe3e 	bl	8006f2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	441a      	add	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022be:	2100      	movs	r1, #0
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f006 fc23 	bl	8008b0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 81f2 	bne.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d112      	bne.n	8002326 <PCD_EP_ISR_Handler+0x24e>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800230a:	b29a      	uxth	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800231a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231e:	b29a      	uxth	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e02f      	b.n	8002386 <PCD_EP_ISR_Handler+0x2ae>
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b3e      	cmp	r3, #62	; 0x3e
 800232c:	d813      	bhi.n	8002356 <PCD_EP_ISR_Handler+0x27e>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <PCD_EP_ISR_Handler+0x270>
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	3301      	adds	r3, #1
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	b29b      	uxth	r3, r3
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	b29a      	uxth	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e017      	b.n	8002386 <PCD_EP_ISR_Handler+0x2ae>
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <PCD_EP_ISR_Handler+0x298>
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	3b01      	subs	r3, #1
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	b29b      	uxth	r3, r3
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	b29b      	uxth	r3, r3
 8002378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002380:	b29a      	uxth	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	827b      	strh	r3, [r7, #18]
 8002398:	8a7b      	ldrh	r3, [r7, #18]
 800239a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800239e:	827b      	strh	r3, [r7, #18]
 80023a0:	8a7b      	ldrh	r3, [r7, #18]
 80023a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023a6:	827b      	strh	r3, [r7, #18]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	8a7b      	ldrh	r3, [r7, #18]
 80023ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8013      	strh	r3, [r2, #0]
 80023c2:	e17b      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f280 80ea 	bge.w	80025b4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023f6:	4013      	ands	r3, r2
 80023f8:	853b      	strh	r3, [r7, #40]	; 0x28
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800240a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800240e:	b292      	uxth	r2, r2
 8002410:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002412:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	7b1b      	ldrb	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d122      	bne.n	8002476 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	3306      	adds	r3, #6
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002458:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800245a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8087 	beq.w	8002570 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	6959      	ldr	r1, [r3, #20]
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	88da      	ldrh	r2, [r3, #6]
 800246e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002470:	f004 fd5c 	bl	8006f2c <USB_ReadPMA>
 8002474:	e07c      	b.n	8002570 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d108      	bne.n	8002490 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800247e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002480:	461a      	mov	r2, r3
 8002482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f927 	bl	80026d8 <HAL_PCD_EP_DB_Receive>
 800248a:	4603      	mov	r3, r0
 800248c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800248e:	e06f      	b.n	8002570 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	441a      	add	r2, r3
 80024ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d021      	beq.n	800252e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	3302      	adds	r3, #2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002512:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002514:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02a      	beq.n	8002570 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	6959      	ldr	r1, [r3, #20]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	891a      	ldrh	r2, [r3, #8]
 8002526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002528:	f004 fd00 	bl	8006f2c <USB_ReadPMA>
 800252c:	e020      	b.n	8002570 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	3306      	adds	r3, #6
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002556:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	6959      	ldr	r1, [r3, #20]
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	895a      	ldrh	r2, [r3, #10]
 800256a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256c:	f004 fcde 	bl	8006f2c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002576:	441a      	add	r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002582:	441a      	add	r2, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <PCD_EP_ISR_Handler+0x4c2>
 8002590:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d206      	bcs.n	80025a8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f006 fab3 	bl	8008b0c <HAL_PCD_DataOutStageCallback>
 80025a6:	e005      	b.n	80025b4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 f842 	bl	8005638 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d07e      	beq.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ec:	843b      	strh	r3, [r7, #32]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	441a      	add	r2, r3
 80025fc:	8c3b      	ldrh	r3, [r7, #32]
 80025fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002606:	b29b      	uxth	r3, r3
 8002608:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	78db      	ldrb	r3, [r3, #3]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d00c      	beq.n	800262c <PCD_EP_ISR_Handler+0x554>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	78db      	ldrb	r3, [r3, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800261e:	2b02      	cmp	r3, #2
 8002620:	d146      	bne.n	80026b0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002622:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d141      	bne.n	80026b0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	3302      	adds	r3, #2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002654:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	8bfb      	ldrh	r3, [r7, #30]
 800265c:	429a      	cmp	r2, r3
 800265e:	d906      	bls.n	800266e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	8bfb      	ldrh	r3, [r7, #30]
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	e002      	b.n	8002674 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f006 fa5d 	bl	8008b42 <HAL_PCD_DataInStageCallback>
 8002688:	e018      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	8bfb      	ldrh	r3, [r7, #30]
 8002690:	441a      	add	r2, r3
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	8bfb      	ldrh	r3, [r7, #30]
 800269c:	441a      	add	r2, r3
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 ffc5 	bl	8005638 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026ae:	e005      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b2:	461a      	mov	r2, r3
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f91b 	bl	80028f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f6ff ad0a 	blt.w	80020e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3738      	adds	r7, #56	; 0x38
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d07e      	beq.n	80027ee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	3302      	adds	r3, #2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	8b7b      	ldrh	r3, [r7, #26]
 8002720:	429a      	cmp	r2, r3
 8002722:	d306      	bcc.n	8002732 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	8b7b      	ldrh	r3, [r7, #26]
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	619a      	str	r2, [r3, #24]
 8002730:	e002      	b.n	8002738 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d123      	bne.n	8002788 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	833b      	strh	r3, [r7, #24]
 800275c:	8b3b      	ldrh	r3, [r7, #24]
 800275e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002762:	833b      	strh	r3, [r7, #24]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	8b3b      	ldrh	r3, [r7, #24]
 8002774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	b29b      	uxth	r3, r3
 8002786:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01f      	beq.n	80027d2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ac:	82fb      	strh	r3, [r7, #22]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	8afb      	ldrh	r3, [r7, #22]
 80027be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027d2:	8b7b      	ldrh	r3, [r7, #26]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8087 	beq.w	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6959      	ldr	r1, [r3, #20]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	891a      	ldrh	r2, [r3, #8]
 80027e6:	8b7b      	ldrh	r3, [r7, #26]
 80027e8:	f004 fba0 	bl	8006f2c <USB_ReadPMA>
 80027ec:	e07c      	b.n	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	3306      	adds	r3, #6
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	8b7b      	ldrh	r3, [r7, #26]
 800281e:	429a      	cmp	r2, r3
 8002820:	d306      	bcc.n	8002830 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	8b7b      	ldrh	r3, [r7, #26]
 8002828:	1ad2      	subs	r2, r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	e002      	b.n	8002836 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d123      	bne.n	8002886 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	83fb      	strh	r3, [r7, #30]
 800285a:	8bfb      	ldrh	r3, [r7, #30]
 800285c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002860:	83fb      	strh	r3, [r7, #30]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	441a      	add	r2, r3
 8002870:	8bfb      	ldrh	r3, [r7, #30]
 8002872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800287a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11f      	bne.n	80028d0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	83bb      	strh	r3, [r7, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028d0:	8b7b      	ldrh	r3, [r7, #26]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6959      	ldr	r1, [r3, #20]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	895a      	ldrh	r2, [r3, #10]
 80028e2:	8b7b      	ldrh	r3, [r7, #26]
 80028e4:	f004 fb22 	bl	8006f2c <USB_ReadPMA>
    }
  }

  return count;
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b0a2      	sub	sp, #136	; 0x88
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	4613      	mov	r3, r2
 80028fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 81c7 	beq.w	8002c9a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	3302      	adds	r3, #2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002934:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002940:	429a      	cmp	r2, r3
 8002942:	d907      	bls.n	8002954 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	e002      	b.n	800295a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 80b9 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d126      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0xc8>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	4413      	add	r3, r2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	4413      	add	r3, r2
 800298e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	e01a      	b.n	80029f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d116      	bne.n	80029f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	4413      	add	r3, r2
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	011a      	lsls	r2, r3, #4
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	4413      	add	r3, r2
 80029e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2200      	movs	r2, #0
 80029ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d126      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x15a>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	011a      	lsls	r2, r3, #4
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	e017      	b.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d113      	bne.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	4413      	add	r3, r2
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	011a      	lsls	r2, r3, #4
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f006 f85d 	bl	8008b42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 82d4 	beq.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	827b      	strh	r3, [r7, #18]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	8a7b      	ldrh	r3, [r7, #18]
 8002ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	8013      	strh	r3, [r2, #0]
 8002ad4:	e2b2      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	f040 8286 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b38:	441a      	add	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b46:	441a      	add	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d309      	bcc.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b64:	1ad2      	subs	r2, r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	621a      	str	r2, [r3, #32]
 8002b6a:	e015      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b82:	e009      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d155      	bne.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x35a>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	4413      	add	r3, r2
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	011a      	lsls	r2, r3, #4
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d112      	bne.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x302>
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	801a      	strh	r2, [r3, #0]
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e047      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8002bf8:	d811      	bhi.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x32c>
 8002bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	029b      	lsls	r3, r3, #10
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	e032      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c30:	3b01      	subs	r3, #1
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	029b      	lsls	r3, r3, #10
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e01b      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d117      	bne.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	643b      	str	r3, [r7, #64]	; 0x40
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	4413      	add	r3, r2
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c74:	4413      	add	r3, r2
 8002c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	6959      	ldr	r1, [r3, #20]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	891a      	ldrh	r2, [r3, #8]
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f004 f905 	bl	8006ea2 <USB_WritePMA>
 8002c98:	e1d0      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	3306      	adds	r3, #6
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d307      	bcc.n	8002ce2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	e002      	b.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 80c4 	bne.w	8002e7a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	785b      	ldrb	r3, [r3, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d126      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x456>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	4413      	add	r3, r2
 8002d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	011a      	lsls	r2, r3, #4
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e01a      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d116      	bne.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	677b      	str	r3, [r7, #116]	; 0x74
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d64:	4413      	add	r3, r2
 8002d66:	677b      	str	r3, [r7, #116]	; 0x74
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	011a      	lsls	r2, r3, #4
 8002d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d70:	4413      	add	r3, r2
 8002d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d76:	673b      	str	r3, [r7, #112]	; 0x70
 8002d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d12f      	bne.n	8002dec <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da4:	4413      	add	r3, r2
 8002da6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	011a      	lsls	r2, r3, #4
 8002db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db4:	4413      	add	r3, r2
 8002db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e017      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d113      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e02:	4413      	add	r3, r2
 8002e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	011a      	lsls	r2, r3, #4
 8002e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0e:	4413      	add	r3, r2
 8002e10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f005 fe8d 	bl	8008b42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 8104 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]
 8002e78:	e0e0      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d121      	bne.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	441a      	add	r2, r3
 8002eb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 80b4 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002edc:	441a      	add	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eea:	441a      	add	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d309      	bcc.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f08:	1ad2      	subs	r2, r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	621a      	str	r2, [r3, #32]
 8002f0e:	e015      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f26:	e009      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	667b      	str	r3, [r7, #100]	; 0x64
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d155      	bne.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x704>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5e:	4413      	add	r3, r2
 8002f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	011a      	lsls	r2, r3, #4
 8002f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f70:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d112      	bne.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e044      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fa2:	d811      	bhi.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8002faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8002fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	e02f      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	657b      	str	r3, [r7, #84]	; 0x54
 8002fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	e018      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d114      	bne.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300c:	4413      	add	r3, r2
 800300e:	667b      	str	r3, [r7, #100]	; 0x64
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	011a      	lsls	r2, r3, #4
 8003016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003018:	4413      	add	r3, r2
 800301a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800301e:	663b      	str	r3, [r7, #96]	; 0x60
 8003020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003022:	b29a      	uxth	r2, r3
 8003024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003026:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6959      	ldr	r1, [r3, #20]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	895a      	ldrh	r2, [r3, #10]
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	f003 ff33 	bl	8006ea2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003056:	823b      	strh	r3, [r7, #16]
 8003058:	8a3b      	ldrh	r3, [r7, #16]
 800305a:	f083 0310 	eor.w	r3, r3, #16
 800305e:	823b      	strh	r3, [r7, #16]
 8003060:	8a3b      	ldrh	r3, [r7, #16]
 8003062:	f083 0320 	eor.w	r3, r3, #32
 8003066:	823b      	strh	r3, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	8a3b      	ldrh	r3, [r7, #16]
 8003078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800307c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003088:	b29b      	uxth	r3, r3
 800308a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3788      	adds	r7, #136	; 0x88
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	817b      	strh	r3, [r7, #10]
 80030a4:	4613      	mov	r3, r2
 80030a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	897b      	ldrh	r3, [r7, #10]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e009      	b.n	80030e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030cc:	897a      	ldrh	r2, [r7, #10]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	80da      	strh	r2, [r3, #6]
 80030f4:	e00b      	b.n	800310e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2201      	movs	r2, #1
 80030fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	b29a      	uxth	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
	...

0800311c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e26c      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8087 	beq.w	800324a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800313c:	4b92      	ldr	r3, [pc, #584]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b04      	cmp	r3, #4
 8003146:	d00c      	beq.n	8003162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003148:	4b8f      	ldr	r3, [pc, #572]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d112      	bne.n	800317a <HAL_RCC_OscConfig+0x5e>
 8003154:	4b8c      	ldr	r3, [pc, #560]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d10b      	bne.n	800317a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003162:	4b89      	ldr	r3, [pc, #548]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d06c      	beq.n	8003248 <HAL_RCC_OscConfig+0x12c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d168      	bne.n	8003248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e246      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x76>
 8003184:	4b80      	ldr	r3, [pc, #512]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a7f      	ldr	r2, [pc, #508]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800318a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e02e      	b.n	80031f0 <HAL_RCC_OscConfig+0xd4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x98>
 800319a:	4b7b      	ldr	r3, [pc, #492]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7a      	ldr	r2, [pc, #488]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b78      	ldr	r3, [pc, #480]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a77      	ldr	r2, [pc, #476]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xd4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0xbc>
 80031be:	4b72      	ldr	r3, [pc, #456]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a71      	ldr	r2, [pc, #452]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xd4>
 80031d8:	4b6b      	ldr	r3, [pc, #428]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6a      	ldr	r2, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a67      	ldr	r2, [pc, #412]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fcce 	bl	8000b98 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fd fcca 	bl	8000b98 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e1fa      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b5d      	ldr	r3, [pc, #372]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xe4>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fd fcba 	bl	8000b98 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fd fcb6 	bl	8000b98 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1e6      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x10c>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d063      	beq.n	800331e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003256:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x18c>
 800326e:	4b46      	ldr	r3, [pc, #280]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x176>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1ba      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4939      	ldr	r1, [pc, #228]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e03a      	b.n	800331e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fd fc6f 	bl	8000b98 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032be:	f7fd fc6b 	bl	8000b98 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e19b      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4927      	ldr	r1, [pc, #156]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fc4e 	bl	8000b98 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003300:	f7fd fc4a 	bl	8000b98 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e17a      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03a      	beq.n	80033a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d019      	beq.n	8003366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <HAL_RCC_OscConfig+0x274>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7fd fc2e 	bl	8000b98 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd fc2a 	bl	8000b98 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e15a      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800335e:	2001      	movs	r0, #1
 8003360:	f000 faa6 	bl	80038b0 <RCC_Delay>
 8003364:	e01c      	b.n	80033a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_OscConfig+0x274>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336c:	f7fd fc14 	bl	8000b98 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003372:	e00f      	b.n	8003394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003374:	f7fd fc10 	bl	8000b98 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d908      	bls.n	8003394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e140      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	42420000 	.word	0x42420000
 8003390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b9e      	ldr	r3, [pc, #632]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e9      	bne.n	8003374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a6 	beq.w	80034fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b97      	ldr	r3, [pc, #604]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b94      	ldr	r3, [pc, #592]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a93      	ldr	r2, [pc, #588]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b91      	ldr	r3, [pc, #580]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b8e      	ldr	r3, [pc, #568]	; (8003614 <HAL_RCC_OscConfig+0x4f8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b8b      	ldr	r3, [pc, #556]	; (8003614 <HAL_RCC_OscConfig+0x4f8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a8a      	ldr	r2, [pc, #552]	; (8003614 <HAL_RCC_OscConfig+0x4f8>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fd fbd1 	bl	8000b98 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fd fbcd 	bl	8000b98 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b64      	cmp	r3, #100	; 0x64
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0fd      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b81      	ldr	r3, [pc, #516]	; (8003614 <HAL_RCC_OscConfig+0x4f8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x312>
 8003420:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a7a      	ldr	r2, [pc, #488]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e02d      	b.n	800348a <HAL_RCC_OscConfig+0x36e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x334>
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a75      	ldr	r2, [pc, #468]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	4b73      	ldr	r3, [pc, #460]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a72      	ldr	r2, [pc, #456]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6213      	str	r3, [r2, #32]
 800344e:	e01c      	b.n	800348a <HAL_RCC_OscConfig+0x36e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d10c      	bne.n	8003472 <HAL_RCC_OscConfig+0x356>
 8003458:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a6c      	ldr	r2, [pc, #432]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4a69      	ldr	r2, [pc, #420]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6213      	str	r3, [r2, #32]
 8003470:	e00b      	b.n	800348a <HAL_RCC_OscConfig+0x36e>
 8003472:	4b67      	ldr	r3, [pc, #412]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a66      	ldr	r2, [pc, #408]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6213      	str	r3, [r2, #32]
 800347e:	4b64      	ldr	r3, [pc, #400]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4a63      	ldr	r2, [pc, #396]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d015      	beq.n	80034be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fd fb81 	bl	8000b98 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd fb7d 	bl	8000b98 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0ab      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	4b57      	ldr	r3, [pc, #348]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ee      	beq.n	800349a <HAL_RCC_OscConfig+0x37e>
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034be:	f7fd fb6b 	bl	8000b98 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fd fb67 	bl	8000b98 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e095      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d105      	bne.n	80034fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ee:	4b48      	ldr	r3, [pc, #288]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4a47      	ldr	r2, [pc, #284]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8081 	beq.w	8003606 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003504:	4b42      	ldr	r3, [pc, #264]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b08      	cmp	r3, #8
 800350e:	d061      	beq.n	80035d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d146      	bne.n	80035a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCC_OscConfig+0x4fc>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7fd fb3b 	bl	8000b98 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd fb37 	bl	8000b98 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e067      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003538:	4b35      	ldr	r3, [pc, #212]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d108      	bne.n	8003560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800354e:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	492d      	ldr	r1, [pc, #180]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a19      	ldr	r1, [r3, #32]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	430b      	orrs	r3, r1
 8003572:	4927      	ldr	r1, [pc, #156]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x4fc>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fd fb0b 	bl	8000b98 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7fd fb07 	bl	8000b98 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e037      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x46a>
 80035a4:	e02f      	b.n	8003606 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_RCC_OscConfig+0x4fc>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fd faf4 	bl	8000b98 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd faf0 	bl	8000b98 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e020      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x498>
 80035d2:	e018      	b.n	8003606 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e013      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	40007000 	.word	0x40007000
 8003618:	42420060 	.word	0x42420060

0800361c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0d0      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003630:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d910      	bls.n	8003660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4965      	ldr	r1, [pc, #404]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a58      	ldr	r2, [pc, #352]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800369a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	494d      	ldr	r1, [pc, #308]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d040      	beq.n	800373c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d115      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e073      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06b      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4936      	ldr	r1, [pc, #216]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800370c:	f7fd fa44 	bl	8000b98 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	e00a      	b.n	800372a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003714:	f7fd fa40 	bl	8000b98 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e053      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 020c 	and.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	429a      	cmp	r2, r3
 800373a:	d1eb      	bne.n	8003714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d210      	bcs.n	800376c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	4922      	ldr	r1, [pc, #136]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e032      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4916      	ldr	r1, [pc, #88]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	490e      	ldr	r1, [pc, #56]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037aa:	f000 f821 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	490a      	ldr	r1, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	5ccb      	ldrb	r3, [r1, r3]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1cc>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1d0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd f9a2 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40022000 	.word	0x40022000
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08009208 	.word	0x08009208
 80037e8:	20000000 	.word	0x20000000
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	b490      	push	{r4, r7}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037f6:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037f8:	1d3c      	adds	r4, r7, #4
 80037fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003800:	f240 2301 	movw	r3, #513	; 0x201
 8003804:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b04      	cmp	r3, #4
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x40>
 800382a:	2b08      	cmp	r3, #8
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x46>
 800382e:	e02d      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003832:	623b      	str	r3, [r7, #32]
      break;
 8003834:	e02d      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	0c9b      	lsrs	r3, r3, #18
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003842:	4413      	add	r3, r2
 8003844:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003848:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003854:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0c5b      	lsrs	r3, r3, #17
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003862:	4413      	add	r3, r2
 8003864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a0e      	ldr	r2, [pc, #56]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	fb02 f203 	mul.w	r2, r2, r3
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	e004      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	623b      	str	r3, [r7, #32]
      break;
 800388a:	e002      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388e:	623b      	str	r3, [r7, #32]
      break;
 8003890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003892:	6a3b      	ldr	r3, [r7, #32]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3728      	adds	r7, #40	; 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bc90      	pop	{r4, r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	080091b0 	.word	0x080091b0
 80038a4:	40021000 	.word	0x40021000
 80038a8:	007a1200 	.word	0x007a1200
 80038ac:	003d0900 	.word	0x003d0900

080038b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <RCC_Delay+0x34>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <RCC_Delay+0x38>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0a5b      	lsrs	r3, r3, #9
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038cc:	bf00      	nop
  }
  while (Delay --);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	60fa      	str	r2, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f9      	bne.n	80038cc <RCC_Delay+0x1c>
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	20000000 	.word	0x20000000
 80038e8:	10624dd3 	.word	0x10624dd3

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d07d      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003908:	2300      	movs	r3, #0
 800390a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390c:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003918:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	61d3      	str	r3, [r2, #28]
 8003924:	4b49      	ldr	r3, [pc, #292]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d118      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a42      	ldr	r2, [pc, #264]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394c:	f7fd f924 	bl	8000b98 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	e008      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003954:	f7fd f920 	bl	8000b98 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e06d      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02e      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d027      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003990:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800399a:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039a0:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039a6:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d014      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fd f8ef 	bl	8000b98 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fd f8eb 	bl	8000b98 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e036      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ee      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4917      	ldr	r1, [pc, #92]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	490b      	ldr	r1, [pc, #44]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	4904      	ldr	r1, [pc, #16]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42420440 	.word	0x42420440

08003a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e041      	b.n	8003aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fc ff50 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f000 fc6a 	bl	8004370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d001      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e03a      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_TIM_Base_Start_IT+0x98>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800

08003b9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f839 	bl	8003c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fbc8 	bl	8004370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <HAL_TIM_PWM_Start+0x24>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e022      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x6a>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d109      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x3e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e015      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x6a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d109      	bne.n	8003ca4 <HAL_TIM_PWM_Start+0x58>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e008      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x6a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e05e      	b.n	8003d7c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_PWM_Start+0x82>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	e013      	b.n	8003cf6 <HAL_TIM_PWM_Start+0xaa>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_PWM_Start+0x92>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cdc:	e00b      	b.n	8003cf6 <HAL_TIM_PWM_Start+0xaa>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_PWM_Start+0xa2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cec:	e003      	b.n	8003cf6 <HAL_TIM_PWM_Start+0xaa>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fe44 	bl	800498c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_TIM_PWM_Start+0x138>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_TIM_PWM_Start+0x138>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_TIM_PWM_Start+0xfa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d009      	beq.n	8003d46 <HAL_TIM_PWM_Start+0xfa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <HAL_TIM_PWM_Start+0x13c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_TIM_PWM_Start+0xfa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <HAL_TIM_PWM_Start+0x140>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d111      	bne.n	8003d6a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b06      	cmp	r3, #6
 8003d56:	d010      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d68:	e007      	b.n	8003d7a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fab1 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 faa4 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fab3 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa87 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa7a 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa89 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa5d 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa50 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fa5f 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa33 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa26 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa35 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fbe6 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fdb1 	bl	8004aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9f9 	bl	800435e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0220 	mvn.w	r2, #32
 8003f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fd7c 	bl	8004a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e0ac      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	f200 809f 	bhi.w	8004108 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08004005 	.word	0x08004005
 8003fd4:	08004109 	.word	0x08004109
 8003fd8:	08004109 	.word	0x08004109
 8003fdc:	08004109 	.word	0x08004109
 8003fe0:	08004045 	.word	0x08004045
 8003fe4:	08004109 	.word	0x08004109
 8003fe8:	08004109 	.word	0x08004109
 8003fec:	08004109 	.word	0x08004109
 8003ff0:	08004087 	.word	0x08004087
 8003ff4:	08004109 	.word	0x08004109
 8003ff8:	08004109 	.word	0x08004109
 8003ffc:	08004109 	.word	0x08004109
 8004000:	080040c7 	.word	0x080040c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fa12 	bl	8004434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0208 	orr.w	r2, r2, #8
 800401e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0204 	bic.w	r2, r2, #4
 800402e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6999      	ldr	r1, [r3, #24]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	619a      	str	r2, [r3, #24]
      break;
 8004042:	e062      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fa58 	bl	8004500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	619a      	str	r2, [r3, #24]
      break;
 8004084:	e041      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 faa1 	bl	80045d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0208 	orr.w	r2, r2, #8
 80040a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0204 	bic.w	r2, r2, #4
 80040b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69d9      	ldr	r1, [r3, #28]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	61da      	str	r2, [r3, #28]
      break;
 80040c4:	e021      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 faeb 	bl	80046a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	021a      	lsls	r2, r3, #8
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	61da      	str	r2, [r3, #28]
      break;
 8004106:	e000      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004108:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIM_ConfigClockSource+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e0b3      	b.n	800429c <HAL_TIM_ConfigClockSource+0x180>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416c:	d03e      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0xd0>
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004172:	f200 8087 	bhi.w	8004284 <HAL_TIM_ConfigClockSource+0x168>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	f000 8085 	beq.w	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d87f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d01a      	beq.n	80041be <HAL_TIM_ConfigClockSource+0xa2>
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d87b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 800418c:	2b60      	cmp	r3, #96	; 0x60
 800418e:	d050      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x116>
 8004190:	2b60      	cmp	r3, #96	; 0x60
 8004192:	d877      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 8004194:	2b50      	cmp	r3, #80	; 0x50
 8004196:	d03c      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0xf6>
 8004198:	2b50      	cmp	r3, #80	; 0x50
 800419a:	d873      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d058      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x136>
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d86f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d064      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
 80041a8:	2b30      	cmp	r3, #48	; 0x30
 80041aa:	d86b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d060      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d867      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05c      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d05a      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041bc:	e062      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6899      	ldr	r1, [r3, #8]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f000 fbbe 	bl	800494e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	609a      	str	r2, [r3, #8]
      break;
 80041ea:	e04e      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f000 fba7 	bl	800494e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800420e:	609a      	str	r2, [r3, #8]
      break;
 8004210:	e03b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	461a      	mov	r2, r3
 8004220:	f000 fb1e 	bl	8004860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2150      	movs	r1, #80	; 0x50
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fb75 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004230:	e02b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	461a      	mov	r2, r3
 8004240:	f000 fb3c 	bl	80048bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2160      	movs	r1, #96	; 0x60
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb65 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004250:	e01b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	461a      	mov	r2, r3
 8004260:	f000 fafe 	bl	8004860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb55 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004270:	e00b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 fb4c 	bl	800491a <TIM_ITRx_SetConfig>
        break;
 8004282:	e002      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004288:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e031      	b.n	8004320 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa38 	bl	8004744 <TIM_SlaveTimer_SetConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e018      	b.n	8004320 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800430c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a29      	ldr	r2, [pc, #164]	; (8004428 <TIM_Base_SetConfig+0xb8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00b      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438e:	d007      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a26      	ldr	r2, [pc, #152]	; (800442c <TIM_Base_SetConfig+0xbc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a25      	ldr	r2, [pc, #148]	; (8004430 <TIM_Base_SetConfig+0xc0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <TIM_Base_SetConfig+0xb8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a19      	ldr	r2, [pc, #100]	; (800442c <TIM_Base_SetConfig+0xbc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a18      	ldr	r2, [pc, #96]	; (8004430 <TIM_Base_SetConfig+0xc0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <TIM_Base_SetConfig+0xb8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800

08004434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 0302 	bic.w	r3, r3, #2
 800447c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <TIM_OC1_SetConfig+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10c      	bne.n	80044aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0308 	bic.w	r3, r3, #8
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a13      	ldr	r2, [pc, #76]	; (80044fc <TIM_OC1_SetConfig+0xc8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40012c00 	.word	0x40012c00

08004500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0210 	bic.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0320 	bic.w	r3, r3, #32
 800454a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <TIM_OC2_SetConfig+0xd0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d10d      	bne.n	800457c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <TIM_OC2_SetConfig+0xd0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d113      	bne.n	80045ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00

080045d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <TIM_OC3_SetConfig+0xd0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10d      	bne.n	800464e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <TIM_OC3_SetConfig+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d113      	bne.n	800467e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800465c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00

080046a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	031b      	lsls	r3, r3, #12
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <TIM_OC4_SetConfig+0x98>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d109      	bne.n	800471c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00

08004744 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b70      	cmp	r3, #112	; 0x70
 8004788:	d01a      	beq.n	80047c0 <TIM_SlaveTimer_SetConfig+0x7c>
 800478a:	2b70      	cmp	r3, #112	; 0x70
 800478c:	d860      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 800478e:	2b60      	cmp	r3, #96	; 0x60
 8004790:	d054      	beq.n	800483c <TIM_SlaveTimer_SetConfig+0xf8>
 8004792:	2b60      	cmp	r3, #96	; 0x60
 8004794:	d85c      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 8004796:	2b50      	cmp	r3, #80	; 0x50
 8004798:	d046      	beq.n	8004828 <TIM_SlaveTimer_SetConfig+0xe4>
 800479a:	2b50      	cmp	r3, #80	; 0x50
 800479c:	d858      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d019      	beq.n	80047d6 <TIM_SlaveTimer_SetConfig+0x92>
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d854      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 80047a6:	2b30      	cmp	r3, #48	; 0x30
 80047a8:	d054      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
 80047aa:	2b30      	cmp	r3, #48	; 0x30
 80047ac:	d850      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d050      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d84c      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04c      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d04a      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80047be:	e047      	b.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68d9      	ldr	r1, [r3, #12]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f000 f8bd 	bl	800494e <TIM_ETR_SetConfig>
      break;
 80047d4:	e03f      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b05      	cmp	r3, #5
 80047dc:	d101      	bne.n	80047e2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e03a      	b.n	8004858 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004808:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	621a      	str	r2, [r3, #32]
      break;
 8004826:	e016      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6899      	ldr	r1, [r3, #8]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	461a      	mov	r2, r3
 8004836:	f000 f813 	bl	8004860 <TIM_TI1_ConfigInputStage>
      break;
 800483a:	e00c      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	461a      	mov	r2, r3
 800484a:	f000 f837 	bl	80048bc <TIM_TI2_ConfigInputStage>
      break;
 800484e:	e002      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004854:	bf00      	nop
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 030a 	bic.w	r3, r3, #10
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 0210 	bic.w	r2, r3, #16
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	031b      	lsls	r3, r3, #12
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	621a      	str	r2, [r3, #32]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	f043 0307 	orr.w	r3, r3, #7
 800493c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b087      	sub	sp, #28
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004968:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	021a      	lsls	r2, r3, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	431a      	orrs	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	609a      	str	r2, [r3, #8]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2201      	movs	r2, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e046      	b.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d009      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800

08004a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	f107 0014 	add.w	r0, r7, #20
 8004ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	b004      	add	sp, #16
 8004ad2:	4770      	bx	lr

08004ad4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ae4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ae8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	4013      	ands	r3, r2
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	f107 0014 	add.w	r0, r7, #20
 8004b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	b004      	add	sp, #16
 8004b8a:	4770      	bx	lr

08004b8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b09b      	sub	sp, #108	; 0x6c
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	78db      	ldrb	r3, [r3, #3]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d81f      	bhi.n	8004bfe <USB_ActivateEndpoint+0x72>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <USB_ActivateEndpoint+0x38>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004c07 	.word	0x08004c07
 8004bd0:	08004be3 	.word	0x08004be3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004be0:	e012      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004be2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004be6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bee:	e00b      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bf8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bfc:	e004      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c04:	e000      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>
      break;
 8004c06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	7b1b      	ldrb	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 8149 	bne.w	8004f0c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8084 	beq.w	8004d8c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	011a      	lsls	r2, r3, #4
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	88db      	ldrh	r3, [r3, #6]
 8004cac:	085b      	lsrs	r3, r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	81fb      	strh	r3, [r7, #14]
 8004cc6:	89fb      	ldrh	r3, [r7, #14]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <USB_ActivateEndpoint+0x17c>
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	81bb      	strh	r3, [r7, #12]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	89bb      	ldrh	r3, [r7, #12]
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d020      	beq.n	8004d52 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	813b      	strh	r3, [r7, #8]
 8004d28:	893b      	ldrh	r3, [r7, #8]
 8004d2a:	f083 0320 	eor.w	r3, r3, #32
 8004d2e:	813b      	strh	r3, [r7, #8]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	893b      	ldrh	r3, [r7, #8]
 8004d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]
 8004d50:	e27f      	b.n	8005252 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d68:	817b      	strh	r3, [r7, #10]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	441a      	add	r2, r3
 8004d74:	897b      	ldrh	r3, [r7, #10]
 8004d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8013      	strh	r3, [r2, #0]
 8004d8a:	e262      	b.n	8005252 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	4413      	add	r3, r2
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	011a      	lsls	r2, r3, #4
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	88db      	ldrh	r3, [r3, #6]
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	4413      	add	r3, r2
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	011a      	lsls	r2, r3, #4
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	4413      	add	r3, r2
 8004dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d112      	bne.n	8004e12 <USB_ActivateEndpoint+0x286>
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	e02f      	b.n	8004e72 <USB_ActivateEndpoint+0x2e6>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b3e      	cmp	r3, #62	; 0x3e
 8004e18:	d813      	bhi.n	8004e42 <USB_ActivateEndpoint+0x2b6>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	663b      	str	r3, [r7, #96]	; 0x60
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <USB_ActivateEndpoint+0x2a8>
 8004e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e30:	3301      	adds	r3, #1
 8004e32:	663b      	str	r3, [r7, #96]	; 0x60
 8004e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	029b      	lsls	r3, r3, #10
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	e017      	b.n	8004e72 <USB_ActivateEndpoint+0x2e6>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <USB_ActivateEndpoint+0x2d0>
 8004e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	029b      	lsls	r3, r3, #10
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	83fb      	strh	r3, [r7, #30]
 8004e80:	8bfb      	ldrh	r3, [r7, #30]
 8004e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01b      	beq.n	8004ec2 <USB_ActivateEndpoint+0x336>
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	83bb      	strh	r3, [r7, #28]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8bbb      	ldrh	r3, [r7, #28]
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	837b      	strh	r3, [r7, #26]
 8004eda:	8b7b      	ldrh	r3, [r7, #26]
 8004edc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ee0:	837b      	strh	r3, [r7, #26]
 8004ee2:	8b7b      	ldrh	r3, [r7, #26]
 8004ee4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ee8:	837b      	strh	r3, [r7, #26]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	8b7b      	ldrh	r3, [r7, #26]
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]
 8004f0a:	e1a2      	b.n	8005252 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f58:	4413      	add	r3, r2
 8004f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	011a      	lsls	r2, r3, #4
 8004f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	891b      	ldrh	r3, [r3, #8]
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	4413      	add	r3, r2
 8004f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	011a      	lsls	r2, r3, #4
 8004f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	895b      	ldrh	r3, [r3, #10]
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 8091 	bne.w	80050dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01b      	beq.n	800500a <USB_ActivateEndpoint+0x47e>
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	873b      	strh	r3, [r7, #56]	; 0x38
 8005018:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01b      	beq.n	800505a <USB_ActivateEndpoint+0x4ce>
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	86fb      	strh	r3, [r7, #54]	; 0x36
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005072:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005074:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005078:	86bb      	strh	r3, [r7, #52]	; 0x34
 800507a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800507c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005080:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800508e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8013      	strh	r3, [r2, #0]
 80050da:	e0ba      	b.n	8005252 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01d      	beq.n	8005134 <USB_ActivateEndpoint+0x5a8>
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005144:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01d      	beq.n	800518c <USB_ActivateEndpoint+0x600>
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005184:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005188:	b29b      	uxth	r3, r3
 800518a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	78db      	ldrb	r3, [r3, #3]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d024      	beq.n	80051de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051b2:	f083 0320 	eor.w	r3, r3, #32
 80051b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	b29b      	uxth	r3, r3
 80051da:	8013      	strh	r3, [r2, #0]
 80051dc:	e01d      	b.n	800521a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005230:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	441a      	add	r2, r3
 800523c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800523e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524e:	b29b      	uxth	r3, r3
 8005250:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005252:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005256:	4618      	mov	r0, r3
 8005258:	376c      	adds	r7, #108	; 0x6c
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005260:	b480      	push	{r7}
 8005262:	b08d      	sub	sp, #52	; 0x34
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	7b1b      	ldrb	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 808e 	bne.w	8005390 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d044      	beq.n	8005306 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	81bb      	strh	r3, [r7, #12]
 800528a:	89bb      	ldrh	r3, [r7, #12]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <USB_DeactivateEndpoint+0x6c>
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	817b      	strh	r3, [r7, #10]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	897b      	ldrh	r3, [r7, #10]
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e2:	813b      	strh	r3, [r7, #8]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]
 8005304:	e192      	b.n	800562c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	827b      	strh	r3, [r7, #18]
 8005314:	8a7b      	ldrh	r3, [r7, #18]
 8005316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01b      	beq.n	8005356 <USB_DeactivateEndpoint+0xf6>
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	823b      	strh	r3, [r7, #16]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	8a3b      	ldrh	r3, [r7, #16]
 8005342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	b29b      	uxth	r3, r3
 8005354:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536c:	81fb      	strh	r3, [r7, #14]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	441a      	add	r2, r3
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538a:	b29b      	uxth	r3, r3
 800538c:	8013      	strh	r3, [r2, #0]
 800538e:	e14d      	b.n	800562c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 80a5 	bne.w	80054e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	843b      	strh	r3, [r7, #32]
 80053a8:	8c3b      	ldrh	r3, [r7, #32]
 80053aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01b      	beq.n	80053ea <USB_DeactivateEndpoint+0x18a>
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c8:	83fb      	strh	r3, [r7, #30]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	441a      	add	r2, r3
 80053d4:	8bfb      	ldrh	r3, [r7, #30]
 80053d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	83bb      	strh	r3, [r7, #28]
 80053f8:	8bbb      	ldrh	r3, [r7, #28]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01b      	beq.n	800543a <USB_DeactivateEndpoint+0x1da>
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005418:	837b      	strh	r3, [r7, #26]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	8b7b      	ldrh	r3, [r7, #26]
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005432:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005450:	833b      	strh	r3, [r7, #24]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8b3b      	ldrh	r3, [r7, #24]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	82fb      	strh	r3, [r7, #22]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	441a      	add	r2, r3
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c0:	82bb      	strh	r3, [r7, #20]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	8abb      	ldrh	r3, [r7, #20]
 80054ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8013      	strh	r3, [r2, #0]
 80054e2:	e0a3      	b.n	800562c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01b      	beq.n	8005534 <USB_DeactivateEndpoint+0x2d4>
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800552c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <USB_DeactivateEndpoint+0x324>
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	853b      	strh	r3, [r7, #40]	; 0x28
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	847b      	strh	r3, [r7, #34]	; 0x22
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3734      	adds	r7, #52	; 0x34
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b0cc      	sub	sp, #304	; 0x130
 800563c:	af00      	add	r7, sp, #0
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	6018      	str	r0, [r3, #0]
 8005642:	463b      	mov	r3, r7
 8005644:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b01      	cmp	r3, #1
 800564e:	f040 872e 	bne.w	80064ae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	429a      	cmp	r2, r3
 8005660:	d905      	bls.n	800566e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800566c:	e004      	b.n	8005678 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005678:	463b      	mov	r3, r7
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	7b1b      	ldrb	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d134      	bne.n	80056ec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6959      	ldr	r1, [r3, #20]
 8005688:	463b      	mov	r3, r7
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	88da      	ldrh	r2, [r3, #6]
 800568e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005692:	b29b      	uxth	r3, r3
 8005694:	1d38      	adds	r0, r7, #4
 8005696:	6800      	ldr	r0, [r0, #0]
 8005698:	f001 fc03 	bl	8006ea2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800569c:	f107 0310 	add.w	r3, r7, #16
 80056a0:	1d3a      	adds	r2, r7, #4
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	4619      	mov	r1, r3
 80056b2:	f107 0310 	add.w	r3, r7, #16
 80056b6:	f107 0210 	add.w	r2, r7, #16
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	440a      	add	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	011a      	lsls	r2, r3, #4
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80056d4:	f107 030c 	add.w	r3, r7, #12
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056de:	b29a      	uxth	r2, r3
 80056e0:	f107 030c 	add.w	r3, r7, #12
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	f000 beac 	b.w	8006444 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	78db      	ldrb	r3, [r3, #3]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	f040 838c 	bne.w	8005e10 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6a1a      	ldr	r2, [r3, #32]
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	f240 8330 	bls.w	8005d6a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005724:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005728:	1d3b      	adds	r3, r7, #4
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800573a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005742:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574a:	b29b      	uxth	r3, r3
 800574c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a1a      	ldr	r2, [r3, #32]
 8005754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005758:	1ad2      	subs	r2, r2, r3
 800575a:	463b      	mov	r3, r7
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	463b      	mov	r3, r7
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 819e 	beq.w	8005ab8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800577c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005780:	1d3a      	adds	r2, r7, #4
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d17a      	bne.n	8005886 <USB_EPStartXfer+0x24e>
 8005790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005794:	1d3a      	adds	r2, r7, #4
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	440a      	add	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	463b      	mov	r3, r7
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	011a      	lsls	r2, r3, #4
 80057bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4413      	add	r3, r2
 80057c4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80057c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11a      	bne.n	800580c <USB_EPStartXfer+0x1d4>
 80057d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005800:	b29a      	uxth	r2, r3
 8005802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	e062      	b.n	80058d2 <USB_EPStartXfer+0x29a>
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	2b3e      	cmp	r3, #62	; 0x3e
 8005812:	d819      	bhi.n	8005848 <USB_EPStartXfer+0x210>
 8005814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800581e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <USB_EPStartXfer+0x1fc>
 800582a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800582e:	3301      	adds	r3, #1
 8005830:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005834:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005838:	b29b      	uxth	r3, r3
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b29a      	uxth	r2, r3
 800583e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e044      	b.n	80058d2 <USB_EPStartXfer+0x29a>
 8005848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2b00      	cmp	r3, #0
 800585c:	d104      	bne.n	8005868 <USB_EPStartXfer+0x230>
 800585e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005862:	3b01      	subs	r3, #1
 8005864:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005868:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800586c:	b29b      	uxth	r3, r3
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	b29b      	uxth	r3, r3
 8005872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587a:	b29a      	uxth	r2, r3
 800587c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e025      	b.n	80058d2 <USB_EPStartXfer+0x29a>
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d120      	bne.n	80058d2 <USB_EPStartXfer+0x29a>
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005898:	b29b      	uxth	r3, r3
 800589a:	4619      	mov	r1, r3
 800589c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	440a      	add	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	463b      	mov	r3, r7
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	011a      	lsls	r2, r3, #4
 80058b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4413      	add	r3, r2
 80058ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80058be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058d2:	463b      	mov	r3, r7
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	895b      	ldrh	r3, [r3, #10]
 80058d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6959      	ldr	r1, [r3, #20]
 80058e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058ec:	1d38      	adds	r0, r7, #4
 80058ee:	6800      	ldr	r0, [r0, #0]
 80058f0:	f001 fad7 	bl	8006ea2 <USB_WritePMA>
            ep->xfer_buff += len;
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fe:	441a      	add	r2, r3
 8005900:	463b      	mov	r3, r7
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005906:	463b      	mov	r3, r7
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	463b      	mov	r3, r7
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d909      	bls.n	800592a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	463b      	mov	r3, r7
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	621a      	str	r2, [r3, #32]
 8005928:	e008      	b.n	800593c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2200      	movs	r2, #0
 800593a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800593c:	463b      	mov	r3, r7
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d17a      	bne.n	8005a3c <USB_EPStartXfer+0x404>
 8005946:	f107 0318 	add.w	r3, r7, #24
 800594a:	1d3a      	adds	r2, r7, #4
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	4619      	mov	r1, r3
 800595c:	f107 0318 	add.w	r3, r7, #24
 8005960:	f107 0218 	add.w	r2, r7, #24
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	440a      	add	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	011a      	lsls	r2, r3, #4
 8005972:	f107 0318 	add.w	r3, r7, #24
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4413      	add	r3, r2
 800597a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800597e:	f107 0314 	add.w	r3, r7, #20
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11a      	bne.n	80059c2 <USB_EPStartXfer+0x38a>
 800598c:	f107 0314 	add.w	r3, r7, #20
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800599a:	b29a      	uxth	r2, r3
 800599c:	f107 0314 	add.w	r3, r7, #20
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e067      	b.n	8005a92 <USB_EPStartXfer+0x45a>
 80059c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c6:	2b3e      	cmp	r3, #62	; 0x3e
 80059c8:	d819      	bhi.n	80059fe <USB_EPStartXfer+0x3c6>
 80059ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <USB_EPStartXfer+0x3b2>
 80059e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059e4:	3301      	adds	r3, #1
 80059e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	f107 0314 	add.w	r3, r7, #20
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e049      	b.n	8005a92 <USB_EPStartXfer+0x45a>
 80059fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <USB_EPStartXfer+0x3e6>
 8005a14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	029b      	lsls	r3, r3, #10
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	f107 0314 	add.w	r3, r7, #20
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	e02a      	b.n	8005a92 <USB_EPStartXfer+0x45a>
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d125      	bne.n	8005a92 <USB_EPStartXfer+0x45a>
 8005a46:	f107 0320 	add.w	r3, r7, #32
 8005a4a:	1d3a      	adds	r2, r7, #4
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f107 0320 	add.w	r3, r7, #32
 8005a60:	f107 0220 	add.w	r2, r7, #32
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	440a      	add	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	011a      	lsls	r2, r3, #4
 8005a72:	f107 0320 	add.w	r3, r7, #32
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a7e:	f107 031c 	add.w	r3, r7, #28
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	f107 031c 	add.w	r3, r7, #28
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	891b      	ldrh	r3, [r3, #8]
 8005a98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6959      	ldr	r1, [r3, #20]
 8005aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005aac:	1d38      	adds	r0, r7, #4
 8005aae:	6800      	ldr	r0, [r0, #0]
 8005ab0:	f001 f9f7 	bl	8006ea2 <USB_WritePMA>
 8005ab4:	f000 bcc6 	b.w	8006444 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d164      	bne.n	8005b8c <USB_EPStartXfer+0x554>
 8005ac2:	1d3b      	adds	r3, r7, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad6:	4413      	add	r3, r2
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	011a      	lsls	r2, r3, #4
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aea:	647b      	str	r3, [r7, #68]	; 0x44
 8005aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d112      	bne.n	8005b1a <USB_EPStartXfer+0x4e2>
 8005af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e057      	b.n	8005bca <USB_EPStartXfer+0x592>
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b20:	d817      	bhi.n	8005b52 <USB_EPStartXfer+0x51a>
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <USB_EPStartXfer+0x50a>
 8005b38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e03b      	b.n	8005bca <USB_EPStartXfer+0x592>
 8005b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <USB_EPStartXfer+0x53a>
 8005b68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	029b      	lsls	r3, r3, #10
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e01e      	b.n	8005bca <USB_EPStartXfer+0x592>
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d119      	bne.n	8005bca <USB_EPStartXfer+0x592>
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005baa:	4413      	add	r3, r2
 8005bac:	653b      	str	r3, [r7, #80]	; 0x50
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bca:	463b      	mov	r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	891b      	ldrh	r3, [r3, #8]
 8005bd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6959      	ldr	r1, [r3, #20]
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005be4:	1d38      	adds	r0, r7, #4
 8005be6:	6800      	ldr	r0, [r0, #0]
 8005be8:	f001 f95b 	bl	8006ea2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bec:	463b      	mov	r3, r7
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	441a      	add	r2, r3
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d909      	bls.n	8005c22 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a1a      	ldr	r2, [r3, #32]
 8005c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c18:	1ad2      	subs	r2, r2, r3
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	621a      	str	r2, [r3, #32]
 8005c20:	e008      	b.n	8005c34 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c22:	463b      	mov	r3, r7
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2200      	movs	r2, #0
 8005c32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c34:	1d3b      	adds	r3, r7, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d164      	bne.n	8005d0e <USB_EPStartXfer+0x6d6>
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	4413      	add	r3, r2
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	011a      	lsls	r2, r3, #4
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	4413      	add	r3, r2
 8005c68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d112      	bne.n	8005c9c <USB_EPStartXfer+0x664>
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	e054      	b.n	8005d46 <USB_EPStartXfer+0x70e>
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca2:	d817      	bhi.n	8005cd4 <USB_EPStartXfer+0x69c>
 8005ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d004      	beq.n	8005cc4 <USB_EPStartXfer+0x68c>
 8005cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	029b      	lsls	r3, r3, #10
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	e038      	b.n	8005d46 <USB_EPStartXfer+0x70e>
 8005cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <USB_EPStartXfer+0x6bc>
 8005cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	e01b      	b.n	8005d46 <USB_EPStartXfer+0x70e>
 8005d0e:	463b      	mov	r3, r7
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d116      	bne.n	8005d46 <USB_EPStartXfer+0x70e>
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d26:	4413      	add	r3, r2
 8005d28:	643b      	str	r3, [r7, #64]	; 0x40
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	895b      	ldrh	r3, [r3, #10]
 8005d4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6959      	ldr	r1, [r3, #20]
 8005d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d60:	1d38      	adds	r0, r7, #4
 8005d62:	6800      	ldr	r0, [r0, #0]
 8005d64:	f001 f89d 	bl	8006ea2 <USB_WritePMA>
 8005d68:	e36c      	b.n	8006444 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d74:	1d3b      	adds	r3, r7, #4
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d92:	1d3b      	adds	r3, r7, #4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	441a      	add	r2, r3
 8005da0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dcc:	4413      	add	r3, r2
 8005dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	011a      	lsls	r2, r3, #4
 8005dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	891b      	ldrh	r3, [r3, #8]
 8005df2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df6:	463b      	mov	r3, r7
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6959      	ldr	r1, [r3, #20]
 8005dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e06:	1d38      	adds	r0, r7, #4
 8005e08:	6800      	ldr	r0, [r0, #0]
 8005e0a:	f001 f84a 	bl	8006ea2 <USB_WritePMA>
 8005e0e:	e319      	b.n	8006444 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e2e:	1d3b      	adds	r3, r7, #4
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e66:	1d3b      	adds	r3, r7, #4
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8162 	beq.w	8006146 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d164      	bne.n	8005f5e <USB_EPStartXfer+0x926>
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ea8:	4413      	add	r3, r2
 8005eaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eac:	463b      	mov	r3, r7
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ebc:	677b      	str	r3, [r7, #116]	; 0x74
 8005ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d112      	bne.n	8005eec <USB_EPStartXfer+0x8b4>
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	e057      	b.n	8005f9c <USB_EPStartXfer+0x964>
 8005eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef2:	d817      	bhi.n	8005f24 <USB_EPStartXfer+0x8ec>
 8005ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <USB_EPStartXfer+0x8dc>
 8005f0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	029b      	lsls	r3, r3, #10
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	e03b      	b.n	8005f9c <USB_EPStartXfer+0x964>
 8005f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <USB_EPStartXfer+0x90c>
 8005f3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	029b      	lsls	r3, r3, #10
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e01e      	b.n	8005f9c <USB_EPStartXfer+0x964>
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d119      	bne.n	8005f9c <USB_EPStartXfer+0x964>
 8005f68:	1d3b      	adds	r3, r7, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f78:	4413      	add	r3, r2
 8005f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f7e:	463b      	mov	r3, r7
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	011a      	lsls	r2, r3, #4
 8005f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	895b      	ldrh	r3, [r3, #10]
 8005fa2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6959      	ldr	r1, [r3, #20]
 8005fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fb6:	1d38      	adds	r0, r7, #4
 8005fb8:	6800      	ldr	r0, [r0, #0]
 8005fba:	f000 ff72 	bl	8006ea2 <USB_WritePMA>
          ep->xfer_buff += len;
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc8:	441a      	add	r2, r3
 8005fca:	463b      	mov	r3, r7
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d909      	bls.n	8005ff4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	1ad2      	subs	r2, r2, r3
 8005fec:	463b      	mov	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	621a      	str	r2, [r3, #32]
 8005ff2:	e008      	b.n	8006006 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005ffe:	463b      	mov	r3, r7
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 821a 	beq.w	8006444 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006010:	463b      	mov	r3, r7
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d164      	bne.n	80060e4 <USB_EPStartXfer+0xaac>
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800602e:	4413      	add	r3, r2
 8006030:	66bb      	str	r3, [r7, #104]	; 0x68
 8006032:	463b      	mov	r3, r7
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	011a      	lsls	r2, r3, #4
 800603a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800603c:	4413      	add	r3, r2
 800603e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006042:	667b      	str	r3, [r7, #100]	; 0x64
 8006044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d112      	bne.n	8006072 <USB_EPStartXfer+0xa3a>
 800604c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006056:	b29a      	uxth	r2, r3
 8006058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e057      	b.n	8006122 <USB_EPStartXfer+0xaea>
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	2b3e      	cmp	r3, #62	; 0x3e
 8006078:	d817      	bhi.n	80060aa <USB_EPStartXfer+0xa72>
 800607a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <USB_EPStartXfer+0xa62>
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006094:	3301      	adds	r3, #1
 8006096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e03b      	b.n	8006122 <USB_EPStartXfer+0xaea>
 80060aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <USB_EPStartXfer+0xa92>
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c4:	3b01      	subs	r3, #1
 80060c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	029b      	lsls	r3, r3, #10
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e01e      	b.n	8006122 <USB_EPStartXfer+0xaea>
 80060e4:	463b      	mov	r3, r7
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d119      	bne.n	8006122 <USB_EPStartXfer+0xaea>
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	673b      	str	r3, [r7, #112]	; 0x70
 80060f4:	1d3b      	adds	r3, r7, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006102:	4413      	add	r3, r2
 8006104:	673b      	str	r3, [r7, #112]	; 0x70
 8006106:	463b      	mov	r3, r7
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	011a      	lsls	r2, r3, #4
 800610e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006110:	4413      	add	r3, r2
 8006112:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006116:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611c:	b29a      	uxth	r2, r3
 800611e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006120:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006122:	463b      	mov	r3, r7
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	891b      	ldrh	r3, [r3, #8]
 8006128:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6959      	ldr	r1, [r3, #20]
 8006132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006136:	b29b      	uxth	r3, r3
 8006138:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800613c:	1d38      	adds	r0, r7, #4
 800613e:	6800      	ldr	r0, [r0, #0]
 8006140:	f000 feaf 	bl	8006ea2 <USB_WritePMA>
 8006144:	e17e      	b.n	8006444 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d16f      	bne.n	8006230 <USB_EPStartXfer+0xbf8>
 8006150:	1d3b      	adds	r3, r7, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006160:	b29b      	uxth	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006168:	4413      	add	r3, r2
 800616a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800617a:	4413      	add	r3, r2
 800617c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <USB_EPStartXfer+0xb82>
 800618c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006198:	b29a      	uxth	r2, r3
 800619a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e05f      	b.n	800627a <USB_EPStartXfer+0xc42>
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	2b3e      	cmp	r3, #62	; 0x3e
 80061c0:	d818      	bhi.n	80061f4 <USB_EPStartXfer+0xbbc>
 80061c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <USB_EPStartXfer+0xbaa>
 80061d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061dc:	3301      	adds	r3, #1
 80061de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	029b      	lsls	r3, r3, #10
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e042      	b.n	800627a <USB_EPStartXfer+0xc42>
 80061f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <USB_EPStartXfer+0xbdc>
 800620a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800620e:	3b01      	subs	r3, #1
 8006210:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006214:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29b      	uxth	r3, r3
 800621e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e024      	b.n	800627a <USB_EPStartXfer+0xc42>
 8006230:	463b      	mov	r3, r7
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d11f      	bne.n	800627a <USB_EPStartXfer+0xc42>
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624a:	b29b      	uxth	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006252:	4413      	add	r3, r2
 8006254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006258:	463b      	mov	r3, r7
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	011a      	lsls	r2, r3, #4
 8006260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006264:	4413      	add	r3, r2
 8006266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800626e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006272:	b29a      	uxth	r2, r3
 8006274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006278:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	891b      	ldrh	r3, [r3, #8]
 8006280:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006284:	463b      	mov	r3, r7
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6959      	ldr	r1, [r3, #20]
 800628a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628e:	b29b      	uxth	r3, r3
 8006290:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006294:	1d38      	adds	r0, r7, #4
 8006296:	6800      	ldr	r0, [r0, #0]
 8006298:	f000 fe03 	bl	8006ea2 <USB_WritePMA>
          ep->xfer_buff += len;
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a6:	441a      	add	r2, r3
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062ae:	463b      	mov	r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d909      	bls.n	80062d2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80062be:	463b      	mov	r3, r7
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	621a      	str	r2, [r3, #32]
 80062d0:	e008      	b.n	80062e4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80ab 	beq.w	8006444 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062f6:	463b      	mov	r3, r7
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d16f      	bne.n	80063e0 <USB_EPStartXfer+0xda8>
 8006300:	1d3b      	adds	r3, r7, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006308:	1d3b      	adds	r3, r7, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006310:	b29b      	uxth	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006318:	4413      	add	r3, r2
 800631a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	011a      	lsls	r2, r3, #4
 8006326:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800632a:	4413      	add	r3, r2
 800632c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d116      	bne.n	800636a <USB_EPStartXfer+0xd32>
 800633c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006348:	b29a      	uxth	r2, r3
 800634a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800634e:	801a      	strh	r2, [r3, #0]
 8006350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	e05b      	b.n	8006422 <USB_EPStartXfer+0xdea>
 800636a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636e:	2b3e      	cmp	r3, #62	; 0x3e
 8006370:	d818      	bhi.n	80063a4 <USB_EPStartXfer+0xd6c>
 8006372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800637c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <USB_EPStartXfer+0xd5a>
 8006388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638c:	3301      	adds	r3, #1
 800638e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006396:	b29b      	uxth	r3, r3
 8006398:	029b      	lsls	r3, r3, #10
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e03e      	b.n	8006422 <USB_EPStartXfer+0xdea>
 80063a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <USB_EPStartXfer+0xd8c>
 80063ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063be:	3b01      	subs	r3, #1
 80063c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	029b      	lsls	r3, r3, #10
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	e020      	b.n	8006422 <USB_EPStartXfer+0xdea>
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d11b      	bne.n	8006422 <USB_EPStartXfer+0xdea>
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063fa:	4413      	add	r3, r2
 80063fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	011a      	lsls	r2, r3, #4
 8006408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800640c:	4413      	add	r3, r2
 800640e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006420:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	895b      	ldrh	r3, [r3, #10]
 8006428:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6959      	ldr	r1, [r3, #20]
 8006432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006436:	b29b      	uxth	r3, r3
 8006438:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800643c:	1d38      	adds	r0, r7, #4
 800643e:	6800      	ldr	r0, [r0, #0]
 8006440:	f000 fd2f 	bl	8006ea2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f107 020a 	add.w	r2, r7, #10
 800645a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006462:	8013      	strh	r3, [r2, #0]
 8006464:	f107 030a 	add.w	r3, r7, #10
 8006468:	f107 020a 	add.w	r2, r7, #10
 800646c:	8812      	ldrh	r2, [r2, #0]
 800646e:	f082 0210 	eor.w	r2, r2, #16
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	f107 030a 	add.w	r3, r7, #10
 8006478:	f107 020a 	add.w	r2, r7, #10
 800647c:	8812      	ldrh	r2, [r2, #0]
 800647e:	f082 0220 	eor.w	r2, r2, #32
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	441a      	add	r2, r3
 8006492:	f107 030a 	add.w	r3, r7, #10
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	8013      	strh	r3, [r2, #0]
 80064ac:	e3b5      	b.n	8006c1a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	7b1b      	ldrb	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 8090 	bne.w	80065da <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699a      	ldr	r2, [r3, #24]
 80064c0:	463b      	mov	r3, r7
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d90e      	bls.n	80064e8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	463b      	mov	r3, r7
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	619a      	str	r2, [r3, #24]
 80064e6:	e008      	b.n	80064fa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2200      	movs	r2, #0
 80064f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064fa:	1d3b      	adds	r3, r7, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006512:	4413      	add	r3, r2
 8006514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006518:	463b      	mov	r3, r7
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	011a      	lsls	r2, r3, #4
 8006520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006524:	4413      	add	r3, r2
 8006526:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800652a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800652e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d116      	bne.n	8006564 <USB_EPStartXfer+0xf2c>
 8006536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e32c      	b.n	8006bbe <USB_EPStartXfer+0x1586>
 8006564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006568:	2b3e      	cmp	r3, #62	; 0x3e
 800656a:	d818      	bhi.n	800659e <USB_EPStartXfer+0xf66>
 800656c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <USB_EPStartXfer+0xf54>
 8006582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006586:	3301      	adds	r3, #1
 8006588:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800658c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006590:	b29b      	uxth	r3, r3
 8006592:	029b      	lsls	r3, r3, #10
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	e30f      	b.n	8006bbe <USB_EPStartXfer+0x1586>
 800659e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <USB_EPStartXfer+0xf86>
 80065b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b8:	3b01      	subs	r3, #1
 80065ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	029b      	lsls	r3, r3, #10
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	e2f1      	b.n	8006bbe <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	78db      	ldrb	r3, [r3, #3]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	f040 818f 	bne.w	8006904 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d175      	bne.n	80066dc <USB_EPStartXfer+0x10a4>
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006608:	4413      	add	r3, r2
 800660a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800661a:	4413      	add	r3, r2
 800661c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d116      	bne.n	800665c <USB_EPStartXfer+0x1024>
 800662e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663a:	b29a      	uxth	r2, r3
 800663c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006652:	b29a      	uxth	r2, r3
 8006654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	e065      	b.n	8006728 <USB_EPStartXfer+0x10f0>
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b3e      	cmp	r3, #62	; 0x3e
 8006664:	d81a      	bhi.n	800669c <USB_EPStartXfer+0x1064>
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <USB_EPStartXfer+0x1052>
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	3301      	adds	r3, #1
 8006686:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668e:	b29b      	uxth	r3, r3
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	b29a      	uxth	r2, r3
 8006694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	e045      	b.n	8006728 <USB_EPStartXfer+0x10f0>
 800669c:	463b      	mov	r3, r7
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d104      	bne.n	80066c0 <USB_EPStartXfer+0x1088>
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	3b01      	subs	r3, #1
 80066bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	029b      	lsls	r3, r3, #10
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	e025      	b.n	8006728 <USB_EPStartXfer+0x10f0>
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d120      	bne.n	8006728 <USB_EPStartXfer+0x10f0>
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fe:	4413      	add	r3, r2
 8006700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	011a      	lsls	r2, r3, #4
 800670c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006710:	4413      	add	r3, r2
 8006712:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006716:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	1d3b      	adds	r3, r7, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d175      	bne.n	8006826 <USB_EPStartXfer+0x11ee>
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006742:	1d3b      	adds	r3, r7, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006752:	4413      	add	r3, r2
 8006754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006758:	463b      	mov	r3, r7
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	011a      	lsls	r2, r3, #4
 8006760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006764:	4413      	add	r3, r2
 8006766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800676a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800676e:	463b      	mov	r3, r7
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d116      	bne.n	80067a6 <USB_EPStartXfer+0x116e>
 8006778:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006784:	b29a      	uxth	r2, r3
 8006786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679c:	b29a      	uxth	r2, r3
 800679e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	e061      	b.n	800686a <USB_EPStartXfer+0x1232>
 80067a6:	463b      	mov	r3, r7
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b3e      	cmp	r3, #62	; 0x3e
 80067ae:	d81a      	bhi.n	80067e6 <USB_EPStartXfer+0x11ae>
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <USB_EPStartXfer+0x119c>
 80067ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067ce:	3301      	adds	r3, #1
 80067d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067d8:	b29b      	uxth	r3, r3
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	e041      	b.n	800686a <USB_EPStartXfer+0x1232>
 80067e6:	463b      	mov	r3, r7
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <USB_EPStartXfer+0x11d2>
 8006800:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006804:	3b01      	subs	r3, #1
 8006806:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800680a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800680e:	b29b      	uxth	r3, r3
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	b29b      	uxth	r3, r3
 8006814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681c:	b29a      	uxth	r2, r3
 800681e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e021      	b.n	800686a <USB_EPStartXfer+0x1232>
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d11c      	bne.n	800686a <USB_EPStartXfer+0x1232>
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006838:	b29b      	uxth	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006840:	4413      	add	r3, r2
 8006842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006846:	463b      	mov	r3, r7
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	011a      	lsls	r2, r3, #4
 800684e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006852:	4413      	add	r3, r2
 8006854:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006868:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800686a:	463b      	mov	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 81a4 	beq.w	8006bbe <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006876:	1d3b      	adds	r3, r7, #4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	463b      	mov	r3, r7
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800688a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800688e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <USB_EPStartXfer+0x126a>
 8006896:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10d      	bne.n	80068be <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8187 	bne.w	8006bbe <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 8180 	bne.w	8006bbe <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	463b      	mov	r3, r7
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80068dc:	1d3b      	adds	r3, r7, #4
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	463b      	mov	r3, r7
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80068ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068fe:	b29b      	uxth	r3, r3
 8006900:	8013      	strh	r3, [r2, #0]
 8006902:	e15c      	b.n	8006bbe <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	78db      	ldrb	r3, [r3, #3]
 800690a:	2b01      	cmp	r3, #1
 800690c:	f040 8155 	bne.w	8006bba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006910:	463b      	mov	r3, r7
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	429a      	cmp	r2, r3
 800691e:	d90e      	bls.n	800693e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006920:	463b      	mov	r3, r7
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800692a:	463b      	mov	r3, r7
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006934:	1ad2      	subs	r2, r2, r3
 8006936:	463b      	mov	r3, r7
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	619a      	str	r2, [r3, #24]
 800693c:	e008      	b.n	8006950 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006950:	463b      	mov	r3, r7
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	785b      	ldrb	r3, [r3, #1]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d16f      	bne.n	8006a3a <USB_EPStartXfer+0x1402>
 800695a:	1d3b      	adds	r3, r7, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006972:	4413      	add	r3, r2
 8006974:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006978:	463b      	mov	r3, r7
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	011a      	lsls	r2, r3, #4
 8006980:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006984:	4413      	add	r3, r2
 8006986:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800698a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800698e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d116      	bne.n	80069c4 <USB_EPStartXfer+0x138c>
 8006996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e05f      	b.n	8006a84 <USB_EPStartXfer+0x144c>
 80069c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c8:	2b3e      	cmp	r3, #62	; 0x3e
 80069ca:	d818      	bhi.n	80069fe <USB_EPStartXfer+0x13c6>
 80069cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <USB_EPStartXfer+0x13b4>
 80069e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069e6:	3301      	adds	r3, #1
 80069e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	029b      	lsls	r3, r3, #10
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	e042      	b.n	8006a84 <USB_EPStartXfer+0x144c>
 80069fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <USB_EPStartXfer+0x13e6>
 8006a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	029b      	lsls	r3, r3, #10
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e024      	b.n	8006a84 <USB_EPStartXfer+0x144c>
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d11f      	bne.n	8006a84 <USB_EPStartXfer+0x144c>
 8006a44:	1d3b      	adds	r3, r7, #4
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a4c:	1d3b      	adds	r3, r7, #4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a62:	463b      	mov	r3, r7
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	011a      	lsls	r2, r3, #4
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	4413      	add	r3, r2
 8006a70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	1d3b      	adds	r3, r7, #4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d16f      	bne.n	8006b76 <USB_EPStartXfer+0x153e>
 8006a96:	1d3b      	adds	r3, r7, #4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a9e:	1d3b      	adds	r3, r7, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aae:	4413      	add	r3, r2
 8006ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	011a      	lsls	r2, r3, #4
 8006abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d116      	bne.n	8006b00 <USB_EPStartXfer+0x14c8>
 8006ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006afc:	801a      	strh	r2, [r3, #0]
 8006afe:	e05e      	b.n	8006bbe <USB_EPStartXfer+0x1586>
 8006b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b04:	2b3e      	cmp	r3, #62	; 0x3e
 8006b06:	d818      	bhi.n	8006b3a <USB_EPStartXfer+0x1502>
 8006b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <USB_EPStartXfer+0x14f0>
 8006b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b22:	3301      	adds	r3, #1
 8006b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	029b      	lsls	r3, r3, #10
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	e041      	b.n	8006bbe <USB_EPStartXfer+0x1586>
 8006b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <USB_EPStartXfer+0x1522>
 8006b50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b54:	3b01      	subs	r3, #1
 8006b56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	029b      	lsls	r3, r3, #10
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e023      	b.n	8006bbe <USB_EPStartXfer+0x1586>
 8006b76:	463b      	mov	r3, r7
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d11e      	bne.n	8006bbe <USB_EPStartXfer+0x1586>
 8006b80:	1d3b      	adds	r3, r7, #4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	4413      	add	r3, r2
 8006b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b96:	463b      	mov	r3, r7
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	011a      	lsls	r2, r3, #4
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	e001      	b.n	8006bbe <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e02e      	b.n	8006c1c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bdc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006be0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006be8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bf0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d020      	beq.n	8006c7a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c4e:	81bb      	strh	r3, [r7, #12]
 8006c50:	89bb      	ldrh	r3, [r7, #12]
 8006c52:	f083 0310 	eor.w	r3, r3, #16
 8006c56:	81bb      	strh	r3, [r7, #12]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	89bb      	ldrh	r3, [r7, #12]
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
 8006c78:	e01f      	b.n	8006cba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	81fb      	strh	r3, [r7, #14]
 8006c92:	89fb      	ldrh	r3, [r7, #14]
 8006c94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c98:	81fb      	strh	r3, [r7, #14]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr

08006cc6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b087      	sub	sp, #28
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	7b1b      	ldrb	r3, [r3, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 809d 	bne.w	8006e14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	785b      	ldrb	r3, [r3, #1]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d04c      	beq.n	8006d7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	823b      	strh	r3, [r7, #16]
 8006cf0:	8a3b      	ldrh	r3, [r7, #16]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01b      	beq.n	8006d32 <USB_EPClearStall+0x6c>
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d10:	81fb      	strh	r3, [r7, #14]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	89fb      	ldrh	r3, [r7, #14]
 8006d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	78db      	ldrb	r3, [r3, #3]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d06c      	beq.n	8006e14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d50:	81bb      	strh	r3, [r7, #12]
 8006d52:	89bb      	ldrh	r3, [r7, #12]
 8006d54:	f083 0320 	eor.w	r3, r3, #32
 8006d58:	81bb      	strh	r3, [r7, #12]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	89bb      	ldrh	r3, [r7, #12]
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
 8006d7a:	e04b      	b.n	8006e14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	82fb      	strh	r3, [r7, #22]
 8006d8a:	8afb      	ldrh	r3, [r7, #22]
 8006d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01b      	beq.n	8006dcc <USB_EPClearStall+0x106>
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	82bb      	strh	r3, [r7, #20]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	8abb      	ldrh	r3, [r7, #20]
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	827b      	strh	r3, [r7, #18]
 8006de4:	8a7b      	ldrh	r3, [r7, #18]
 8006de6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dea:	827b      	strh	r3, [r7, #18]
 8006dec:	8a7b      	ldrh	r3, [r7, #18]
 8006dee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006df2:	827b      	strh	r3, [r7, #18]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	8a7b      	ldrh	r3, [r7, #18]
 8006e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bc80      	pop	{r7}
 8006e58:	4770      	bx	lr

08006e5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e80:	68fb      	ldr	r3, [r7, #12]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr

08006e8c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b08d      	sub	sp, #52	; 0x34
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	4611      	mov	r1, r2
 8006eae:	461a      	mov	r2, r3
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	80fb      	strh	r3, [r7, #6]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006eb8:	88bb      	ldrh	r3, [r7, #4]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ec8:	88fb      	ldrh	r3, [r7, #6]
 8006eca:	005a      	lsls	r2, r3, #1
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eda:	e01e      	b.n	8006f1a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	3302      	adds	r3, #2
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	3301      	adds	r3, #1
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	3b01      	subs	r3, #1
 8006f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1dd      	bne.n	8006edc <USB_WritePMA+0x3a>
  }
}
 8006f20:	bf00      	nop
 8006f22:	bf00      	nop
 8006f24:	3734      	adds	r7, #52	; 0x34
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b08b      	sub	sp, #44	; 0x2c
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4611      	mov	r1, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	80fb      	strh	r3, [r7, #6]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f42:	88bb      	ldrh	r3, [r7, #4]
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	005a      	lsls	r2, r3, #1
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f5e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
 8006f64:	e01b      	b.n	8006f9e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	3302      	adds	r3, #2
 8006f72:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	0a1b      	lsrs	r3, r3, #8
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	3302      	adds	r3, #2
 8006f96:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e0      	bne.n	8006f66 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006fa4:	88bb      	ldrh	r3, [r7, #4]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	701a      	strb	r2, [r3, #0]
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	372c      	adds	r7, #44	; 0x2c
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7c1b      	ldrb	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d115      	bne.n	800700e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	2181      	movs	r1, #129	; 0x81
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fe8d 	bl	8008d0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fe83 	bl	8008d0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800700c:	e012      	b.n	8007034 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	2202      	movs	r2, #2
 8007012:	2181      	movs	r1, #129	; 0x81
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fe78 	bl	8008d0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	2202      	movs	r2, #2
 8007024:	2101      	movs	r1, #1
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fe6f 	bl	8008d0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007034:	2308      	movs	r3, #8
 8007036:	2203      	movs	r2, #3
 8007038:	2182      	movs	r1, #130	; 0x82
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fe65 	bl	8008d0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007046:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800704a:	f001 ff85 	bl	8008f58 <USBD_static_malloc>
 800704e:	4602      	mov	r2, r0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	e026      	b.n	80070b4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7c1b      	ldrb	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709a:	2101      	movs	r1, #1
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 ff25 	bl	8008eec <USBD_LL_PrepareReceive>
 80070a2:	e007      	b.n	80070b4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070aa:	2340      	movs	r3, #64	; 0x40
 80070ac:	2101      	movs	r1, #1
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 ff1c 	bl	8008eec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070ce:	2181      	movs	r1, #129	; 0x81
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fe40 	bl	8008d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070dc:	2101      	movs	r1, #1
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fe39 	bl	8008d56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070ec:	2182      	movs	r1, #130	; 0x82
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 fe31 	bl	8008d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00e      	beq.n	8007122 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007114:	4618      	mov	r0, r3
 8007116:	f001 ff2b 	bl	8008f70 <USBD_static_free>
    pdev->pClassData = NULL;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007152:	2b00      	cmp	r3, #0
 8007154:	d039      	beq.n	80071ca <USBD_CDC_Setup+0x9e>
 8007156:	2b20      	cmp	r3, #32
 8007158:	d17f      	bne.n	800725a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	88db      	ldrh	r3, [r3, #6]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d029      	beq.n	80071b6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	b25b      	sxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	da11      	bge.n	8007190 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007178:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	88d2      	ldrh	r2, [r2, #6]
 800717e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007180:	6939      	ldr	r1, [r7, #16]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88db      	ldrh	r3, [r3, #6]
 8007186:	461a      	mov	r2, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 fa0a 	bl	80085a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800718e:	e06b      	b.n	8007268 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785a      	ldrb	r2, [r3, #1]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	88db      	ldrh	r3, [r3, #6]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071a6:	6939      	ldr	r1, [r7, #16]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	88db      	ldrh	r3, [r3, #6]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fa25 	bl	80085fe <USBD_CtlPrepareRx>
      break;
 80071b4:	e058      	b.n	8007268 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	7850      	ldrb	r0, [r2, #1]
 80071c2:	2200      	movs	r2, #0
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	4798      	blx	r3
      break;
 80071c8:	e04e      	b.n	8007268 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b0b      	cmp	r3, #11
 80071d0:	d02e      	beq.n	8007230 <USBD_CDC_Setup+0x104>
 80071d2:	2b0b      	cmp	r3, #11
 80071d4:	dc38      	bgt.n	8007248 <USBD_CDC_Setup+0x11c>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <USBD_CDC_Setup+0xb4>
 80071da:	2b0a      	cmp	r3, #10
 80071dc:	d014      	beq.n	8007208 <USBD_CDC_Setup+0xdc>
 80071de:	e033      	b.n	8007248 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d107      	bne.n	80071fa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80071ea:	f107 030c 	add.w	r3, r7, #12
 80071ee:	2202      	movs	r2, #2
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 f9d5 	bl	80085a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071f8:	e02e      	b.n	8007258 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f966 	bl	80084ce <USBD_CtlError>
            ret = USBD_FAIL;
 8007202:	2302      	movs	r3, #2
 8007204:	75fb      	strb	r3, [r7, #23]
          break;
 8007206:	e027      	b.n	8007258 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720e:	2b03      	cmp	r3, #3
 8007210:	d107      	bne.n	8007222 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007212:	f107 030f 	add.w	r3, r7, #15
 8007216:	2201      	movs	r2, #1
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 f9c1 	bl	80085a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007220:	e01a      	b.n	8007258 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 f952 	bl	80084ce <USBD_CtlError>
            ret = USBD_FAIL;
 800722a:	2302      	movs	r3, #2
 800722c:	75fb      	strb	r3, [r7, #23]
          break;
 800722e:	e013      	b.n	8007258 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007236:	2b03      	cmp	r3, #3
 8007238:	d00d      	beq.n	8007256 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f946 	bl	80084ce <USBD_CtlError>
            ret = USBD_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007246:	e006      	b.n	8007256 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 f93f 	bl	80084ce <USBD_CtlError>
          ret = USBD_FAIL;
 8007250:	2302      	movs	r3, #2
 8007252:	75fb      	strb	r3, [r7, #23]
          break;
 8007254:	e000      	b.n	8007258 <USBD_CDC_Setup+0x12c>
          break;
 8007256:	bf00      	nop
      }
      break;
 8007258:	e006      	b.n	8007268 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f936 	bl	80084ce <USBD_CtlError>
      ret = USBD_FAIL;
 8007262:	2302      	movs	r3, #2
 8007264:	75fb      	strb	r3, [r7, #23]
      break;
 8007266:	bf00      	nop
  }

  return ret;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800728c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d03a      	beq.n	800730e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	331c      	adds	r3, #28
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d029      	beq.n	8007302 <USBD_CDC_DataIn+0x90>
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	331c      	adds	r3, #28
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	78f9      	ldrb	r1, [r7, #3]
 80072c2:	68b8      	ldr	r0, [r7, #8]
 80072c4:	460b      	mov	r3, r1
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	440b      	add	r3, r1
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4403      	add	r3, r0
 80072ce:	3338      	adds	r3, #56	; 0x38
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	fbb2 f1f3 	udiv	r1, r2, r3
 80072d6:	fb03 f301 	mul.w	r3, r3, r1
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d110      	bne.n	8007302 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	331c      	adds	r3, #28
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072f4:	78f9      	ldrb	r1, [r7, #3]
 80072f6:	2300      	movs	r3, #0
 80072f8:	2200      	movs	r2, #0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fdd3 	bl	8008ea6 <USBD_LL_Transmit>
 8007300:	e003      	b.n	800730a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	e000      	b.n	8007310 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800730e:	2302      	movs	r3, #2
  }
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 fdfe 	bl	8008f32 <USBD_LL_GetRxDataSize>
 8007336:	4602      	mov	r2, r0
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00d      	beq.n	8007364 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800735c:	4611      	mov	r1, r2
 800735e:	4798      	blx	r3

    return USBD_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	e000      	b.n	8007366 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007364:	2302      	movs	r3, #2
  }
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007384:	2b00      	cmp	r3, #0
 8007386:	d015      	beq.n	80073b4 <USBD_CDC_EP0_RxReady+0x46>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800738e:	2bff      	cmp	r3, #255	; 0xff
 8007390:	d010      	beq.n	80073b4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80073a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073a8:	b292      	uxth	r2, r2
 80073aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	22ff      	movs	r2, #255	; 0xff
 80073b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2243      	movs	r2, #67	; 0x43
 80073cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20000094 	.word	0x20000094

080073e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2243      	movs	r2, #67	; 0x43
 80073ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80073ee:	4b03      	ldr	r3, [pc, #12]	; (80073fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000050 	.word	0x20000050

08007400 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2243      	movs	r2, #67	; 0x43
 800740c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	; (800741c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	200000d8 	.word	0x200000d8

08007420 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220a      	movs	r2, #10
 800742c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800742e:	4b03      	ldr	r3, [pc, #12]	; (800743c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	2000000c 	.word	0x2000000c

08007440 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800744a:	2302      	movs	r3, #2
 800744c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007480:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	4770      	bx	lr

0800749e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d01c      	beq.n	8007518 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d115      	bne.n	8007514 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007506:	b29b      	uxth	r3, r3
 8007508:	2181      	movs	r1, #129	; 0x81
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fccb 	bl	8008ea6 <USBD_LL_Transmit>

      return USBD_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e002      	b.n	800751a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007518:	2302      	movs	r3, #2
  }
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007530:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d017      	beq.n	800756c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7c1b      	ldrb	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800754a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800754e:	2101      	movs	r1, #1
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fccb 	bl	8008eec <USBD_LL_PrepareReceive>
 8007556:	e007      	b.n	8007568 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800755e:	2340      	movs	r3, #64	; 0x40
 8007560:	2101      	movs	r1, #1
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 fcc2 	bl	8008eec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	e000      	b.n	800756e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	4613      	mov	r3, r2
 8007582:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	e01a      	b.n	80075c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	79fa      	ldrb	r2, [r7, #7]
 80075ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f001 fb2f 	bl	8008c20 <USBD_LL_Init>

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	e001      	b.n	80075f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80075ee:	2302      	movs	r3, #2
 80075f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bc80      	pop	{r7}
 80075fc:	4770      	bx	lr

080075fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fb64 	bl	8008cd4 <USBD_LL_Start>

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007636:	2302      	movs	r3, #2
 8007638:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00c      	beq.n	800765e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	4611      	mov	r1, r2
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	4611      	mov	r1, r2
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fed8 	bl	8008456 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d016      	beq.n	80076f8 <USBD_LL_SetupStage+0x6a>
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d81c      	bhi.n	8007708 <USBD_LL_SetupStage+0x7a>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <USBD_LL_SetupStage+0x4a>
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d008      	beq.n	80076e8 <USBD_LL_SetupStage+0x5a>
 80076d6:	e017      	b.n	8007708 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f9cb 	bl	8007a7c <USBD_StdDevReq>
      break;
 80076e6:	e01a      	b.n	800771e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fa2d 	bl	8007b50 <USBD_StdItfReq>
      break;
 80076f6:	e012      	b.n	800771e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa6d 	bl	8007be0 <USBD_StdEPReq>
      break;
 8007706:	e00a      	b.n	800771e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800770e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007712:	b2db      	uxtb	r3, r3
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fb3c 	bl	8008d94 <USBD_LL_StallEP>
      break;
 800771c:	bf00      	nop
  }

  return USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	460b      	mov	r3, r1
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d14b      	bne.n	80077d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007742:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800774a:	2b03      	cmp	r3, #3
 800774c:	d134      	bne.n	80077b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	429a      	cmp	r2, r3
 8007758:	d919      	bls.n	800778e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	1ad2      	subs	r2, r2, r3
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007770:	429a      	cmp	r2, r3
 8007772:	d203      	bcs.n	800777c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007778:	b29b      	uxth	r3, r3
 800777a:	e002      	b.n	8007782 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007780:	b29b      	uxth	r3, r3
 8007782:	461a      	mov	r2, r3
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 ff57 	bl	800863a <USBD_CtlContinueRx>
 800778c:	e038      	b.n	8007800 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d105      	bne.n	80077b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 ff54 	bl	800865e <USBD_CtlSendStatus>
 80077b6:	e023      	b.n	8007800 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077be:	2b05      	cmp	r3, #5
 80077c0:	d11e      	bne.n	8007800 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80077ca:	2100      	movs	r1, #0
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 fae1 	bl	8008d94 <USBD_LL_StallEP>
 80077d2:	e015      	b.n	8007800 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00d      	beq.n	80077fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d108      	bne.n	80077fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	7afa      	ldrb	r2, [r7, #11]
 80077f4:	4611      	mov	r1, r2
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	4798      	blx	r3
 80077fa:	e001      	b.n	8007800 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077fc:	2302      	movs	r3, #2
 80077fe:	e000      	b.n	8007802 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	460b      	mov	r3, r1
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007818:	7afb      	ldrb	r3, [r7, #11]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d17f      	bne.n	800791e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3314      	adds	r3, #20
 8007822:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800782a:	2b02      	cmp	r3, #2
 800782c:	d15c      	bne.n	80078e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d915      	bls.n	8007866 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	1ad2      	subs	r2, r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	b29b      	uxth	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fec1 	bl	80085da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007858:	2300      	movs	r3, #0
 800785a:	2200      	movs	r2, #0
 800785c:	2100      	movs	r1, #0
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f001 fb44 	bl	8008eec <USBD_LL_PrepareReceive>
 8007864:	e04e      	b.n	8007904 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	6912      	ldr	r2, [r2, #16]
 800786e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007872:	fb02 f201 	mul.w	r2, r2, r1
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11c      	bne.n	80078b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007884:	429a      	cmp	r2, r3
 8007886:	d316      	bcc.n	80078b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007892:	429a      	cmp	r2, r3
 8007894:	d20f      	bcs.n	80078b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 fe9d 	bl	80085da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a8:	2300      	movs	r3, #0
 80078aa:	2200      	movs	r2, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f001 fb1c 	bl	8008eec <USBD_LL_PrepareReceive>
 80078b4:	e026      	b.n	8007904 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d105      	bne.n	80078d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078d8:	2180      	movs	r1, #128	; 0x80
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f001 fa5a 	bl	8008d94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fecf 	bl	8008684 <USBD_CtlReceiveStatus>
 80078e6:	e00d      	b.n	8007904 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d004      	beq.n	80078fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d103      	bne.n	8007904 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80078fc:	2180      	movs	r1, #128	; 0x80
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f001 fa48 	bl	8008d94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d11d      	bne.n	800794a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fe81 	bl	8007616 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800791c:	e015      	b.n	800794a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00d      	beq.n	8007946 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007930:	2b03      	cmp	r3, #3
 8007932:	d108      	bne.n	8007946 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	7afa      	ldrb	r2, [r7, #11]
 800793e:	4611      	mov	r1, r2
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	4798      	blx	r3
 8007944:	e001      	b.n	800794a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007946:	2302      	movs	r3, #2
 8007948:	e000      	b.n	800794c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	2200      	movs	r2, #0
 8007960:	2100      	movs	r1, #0
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 f9d1 	bl	8008d0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2240      	movs	r2, #64	; 0x40
 8007974:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	2200      	movs	r2, #0
 800797c:	2180      	movs	r1, #128	; 0x80
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f9c3 	bl	8008d0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2240      	movs	r2, #64	; 0x40
 800798e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6852      	ldr	r2, [r2, #4]
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	4611      	mov	r1, r2
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
  }

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d105      	bne.n	8007a3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr

08007a46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d10b      	bne.n	8007a70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a92:	2b40      	cmp	r3, #64	; 0x40
 8007a94:	d005      	beq.n	8007aa2 <USBD_StdDevReq+0x26>
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d84f      	bhi.n	8007b3a <USBD_StdDevReq+0xbe>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <USBD_StdDevReq+0x36>
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	d14b      	bne.n	8007b3a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
      break;
 8007ab0:	e048      	b.n	8007b44 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b09      	cmp	r3, #9
 8007ab8:	d839      	bhi.n	8007b2e <USBD_StdDevReq+0xb2>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_StdDevReq+0x44>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007b25 	.word	0x08007b25
 8007ac8:	08007b2f 	.word	0x08007b2f
 8007acc:	08007b1b 	.word	0x08007b1b
 8007ad0:	08007b2f 	.word	0x08007b2f
 8007ad4:	08007af3 	.word	0x08007af3
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007b2f 	.word	0x08007b2f
 8007ae0:	08007b07 	.word	0x08007b07
 8007ae4:	08007afd 	.word	0x08007afd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9dc 	bl	8007ea8 <USBD_GetDescriptor>
          break;
 8007af0:	e022      	b.n	8007b38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb3f 	bl	8008178 <USBD_SetAddress>
          break;
 8007afa:	e01d      	b.n	8007b38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb7e 	bl	8008200 <USBD_SetConfig>
          break;
 8007b04:	e018      	b.n	8007b38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc07 	bl	800831c <USBD_GetConfig>
          break;
 8007b0e:	e013      	b.n	8007b38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fc37 	bl	8008386 <USBD_GetStatus>
          break;
 8007b18:	e00e      	b.n	8007b38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fc65 	bl	80083ec <USBD_SetFeature>
          break;
 8007b22:	e009      	b.n	8007b38 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc74 	bl	8008414 <USBD_ClrFeature>
          break;
 8007b2c:	e004      	b.n	8007b38 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fccc 	bl	80084ce <USBD_CtlError>
          break;
 8007b36:	bf00      	nop
      }
      break;
 8007b38:	e004      	b.n	8007b44 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fcc6 	bl	80084ce <USBD_CtlError>
      break;
 8007b42:	bf00      	nop
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop

08007b50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d005      	beq.n	8007b76 <USBD_StdItfReq+0x26>
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	d82e      	bhi.n	8007bcc <USBD_StdItfReq+0x7c>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <USBD_StdItfReq+0x26>
 8007b72:	2b20      	cmp	r3, #32
 8007b74:	d12a      	bne.n	8007bcc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d81d      	bhi.n	8007bbe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	889b      	ldrh	r3, [r3, #4]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d813      	bhi.n	8007bb4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	88db      	ldrh	r3, [r3, #6]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d110      	bne.n	8007bc8 <USBD_StdItfReq+0x78>
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10d      	bne.n	8007bc8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fd56 	bl	800865e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bb2:	e009      	b.n	8007bc8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fc89 	bl	80084ce <USBD_CtlError>
          break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fc84 	bl	80084ce <USBD_CtlError>
          break;
 8007bc6:	e000      	b.n	8007bca <USBD_StdItfReq+0x7a>
          break;
 8007bc8:	bf00      	nop
      }
      break;
 8007bca:	e004      	b.n	8007bd6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fc7d 	bl	80084ce <USBD_CtlError>
      break;
 8007bd4:	bf00      	nop
  }

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	889b      	ldrh	r3, [r3, #4]
 8007bf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bfc:	2b40      	cmp	r3, #64	; 0x40
 8007bfe:	d007      	beq.n	8007c10 <USBD_StdEPReq+0x30>
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	f200 8146 	bhi.w	8007e92 <USBD_StdEPReq+0x2b2>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <USBD_StdEPReq+0x40>
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	f040 8141 	bne.w	8007e92 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
      break;
 8007c1e:	e13d      	b.n	8007e9c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d10a      	bne.n	8007c42 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	e12d      	b.n	8007e9e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d007      	beq.n	8007c5a <USBD_StdEPReq+0x7a>
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	f300 811b 	bgt.w	8007e86 <USBD_StdEPReq+0x2a6>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d072      	beq.n	8007d3a <USBD_StdEPReq+0x15a>
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d03a      	beq.n	8007cce <USBD_StdEPReq+0xee>
 8007c58:	e115      	b.n	8007e86 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d002      	beq.n	8007c6a <USBD_StdEPReq+0x8a>
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d015      	beq.n	8007c94 <USBD_StdEPReq+0xb4>
 8007c68:	e02b      	b.n	8007cc2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <USBD_StdEPReq+0xaa>
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d009      	beq.n	8007c8a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 f88a 	bl	8008d94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c80:	2180      	movs	r1, #128	; 0x80
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f886 	bl	8008d94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c88:	e020      	b.n	8007ccc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fc1e 	bl	80084ce <USBD_CtlError>
              break;
 8007c92:	e01b      	b.n	8007ccc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	885b      	ldrh	r3, [r3, #2]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10e      	bne.n	8007cba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00b      	beq.n	8007cba <USBD_StdEPReq+0xda>
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	2b80      	cmp	r3, #128	; 0x80
 8007ca6:	d008      	beq.n	8007cba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	88db      	ldrh	r3, [r3, #6]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d104      	bne.n	8007cba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f86d 	bl	8008d94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fccf 	bl	800865e <USBD_CtlSendStatus>

              break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc02 	bl	80084ce <USBD_CtlError>
              break;
 8007cca:	bf00      	nop
          }
          break;
 8007ccc:	e0e0      	b.n	8007e90 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d002      	beq.n	8007cde <USBD_StdEPReq+0xfe>
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d015      	beq.n	8007d08 <USBD_StdEPReq+0x128>
 8007cdc:	e026      	b.n	8007d2c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <USBD_StdEPReq+0x11e>
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b80      	cmp	r3, #128	; 0x80
 8007ce8:	d009      	beq.n	8007cfe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 f850 	bl	8008d94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cf4:	2180      	movs	r1, #128	; 0x80
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 f84c 	bl	8008d94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cfc:	e01c      	b.n	8007d38 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fbe4 	bl	80084ce <USBD_CtlError>
              break;
 8007d06:	e017      	b.n	8007d38 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	885b      	ldrh	r3, [r3, #2]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d112      	bne.n	8007d36 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 f857 	bl	8008dd2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc9a 	bl	800865e <USBD_CtlSendStatus>
              }
              break;
 8007d2a:	e004      	b.n	8007d36 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fbcd 	bl	80084ce <USBD_CtlError>
              break;
 8007d34:	e000      	b.n	8007d38 <USBD_StdEPReq+0x158>
              break;
 8007d36:	bf00      	nop
          }
          break;
 8007d38:	e0aa      	b.n	8007e90 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d002      	beq.n	8007d4a <USBD_StdEPReq+0x16a>
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d032      	beq.n	8007dae <USBD_StdEPReq+0x1ce>
 8007d48:	e097      	b.n	8007e7a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <USBD_StdEPReq+0x180>
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d004      	beq.n	8007d60 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fbb8 	bl	80084ce <USBD_CtlError>
                break;
 8007d5e:	e091      	b.n	8007e84 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	da0b      	bge.n	8007d80 <USBD_StdEPReq+0x1a0>
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	3310      	adds	r3, #16
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	e00b      	b.n	8007d98 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	3304      	adds	r3, #4
 8007d98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2202      	movs	r2, #2
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fbfb 	bl	80085a2 <USBD_CtlSendData>
              break;
 8007dac:	e06a      	b.n	8007e84 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da11      	bge.n	8007dda <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	f003 020f 	and.w	r2, r3, #15
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	3318      	adds	r3, #24
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d117      	bne.n	8007e00 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fb7b 	bl	80084ce <USBD_CtlError>
                  break;
 8007dd8:	e054      	b.n	8007e84 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	f003 020f 	and.w	r2, r3, #15
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fb68 	bl	80084ce <USBD_CtlError>
                  break;
 8007dfe:	e041      	b.n	8007e84 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da0b      	bge.n	8007e20 <USBD_StdEPReq+0x240>
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	3310      	adds	r3, #16
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	e00b      	b.n	8007e38 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	3304      	adds	r3, #4
 8007e38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <USBD_StdEPReq+0x266>
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b80      	cmp	r3, #128	; 0x80
 8007e44:	d103      	bne.n	8007e4e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	e00e      	b.n	8007e6c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 ffdc 	bl	8008e10 <USBD_LL_IsStallEP>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2201      	movs	r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	e002      	b.n	8007e6c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fb95 	bl	80085a2 <USBD_CtlSendData>
              break;
 8007e78:	e004      	b.n	8007e84 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fb26 	bl	80084ce <USBD_CtlError>
              break;
 8007e82:	bf00      	nop
          }
          break;
 8007e84:	e004      	b.n	8007e90 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fb20 	bl	80084ce <USBD_CtlError>
          break;
 8007e8e:	bf00      	nop
      }
      break;
 8007e90:	e004      	b.n	8007e9c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fb1a 	bl	80084ce <USBD_CtlError>
      break;
 8007e9a:	bf00      	nop
  }

  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	885b      	ldrh	r3, [r3, #2]
 8007ec2:	0a1b      	lsrs	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b06      	cmp	r3, #6
 8007eca:	f200 8128 	bhi.w	800811e <USBD_GetDescriptor+0x276>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <USBD_GetDescriptor+0x2c>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007f09 	.word	0x08007f09
 8007edc:	08007f49 	.word	0x08007f49
 8007ee0:	0800811f 	.word	0x0800811f
 8007ee4:	0800811f 	.word	0x0800811f
 8007ee8:	080080bf 	.word	0x080080bf
 8007eec:	080080eb 	.word	0x080080eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7c12      	ldrb	r2, [r2, #16]
 8007efc:	f107 0108 	add.w	r1, r7, #8
 8007f00:	4610      	mov	r0, r2
 8007f02:	4798      	blx	r3
 8007f04:	60f8      	str	r0, [r7, #12]
      break;
 8007f06:	e112      	b.n	800812e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7c1b      	ldrb	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10d      	bne.n	8007f2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	f107 0208 	add.w	r2, r7, #8
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4798      	blx	r3
 8007f20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	2202      	movs	r2, #2
 8007f28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f2a:	e100      	b.n	800812e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	f107 0208 	add.w	r2, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
      break;
 8007f46:	e0f2      	b.n	800812e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	885b      	ldrh	r3, [r3, #2]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	f200 80ac 	bhi.w	80080ac <USBD_GetDescriptor+0x204>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <USBD_GetDescriptor+0xb4>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007f75 	.word	0x08007f75
 8007f60:	08007fa9 	.word	0x08007fa9
 8007f64:	08007fdd 	.word	0x08007fdd
 8007f68:	08008011 	.word	0x08008011
 8007f6c:	08008045 	.word	0x08008045
 8007f70:	08008079 	.word	0x08008079
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	7c12      	ldrb	r2, [r2, #16]
 8007f8c:	f107 0108 	add.w	r1, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f96:	e091      	b.n	80080bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa97 	bl	80084ce <USBD_CtlError>
            err++;
 8007fa0:	7afb      	ldrb	r3, [r7, #11]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fa6:	e089      	b.n	80080bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	7c12      	ldrb	r2, [r2, #16]
 8007fc0:	f107 0108 	add.w	r1, r7, #8
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fca:	e077      	b.n	80080bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa7d 	bl	80084ce <USBD_CtlError>
            err++;
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fda:	e06f      	b.n	80080bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7c12      	ldrb	r2, [r2, #16]
 8007ff4:	f107 0108 	add.w	r1, r7, #8
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
 8007ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ffe:	e05d      	b.n	80080bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa63 	bl	80084ce <USBD_CtlError>
            err++;
 8008008:	7afb      	ldrb	r3, [r7, #11]
 800800a:	3301      	adds	r3, #1
 800800c:	72fb      	strb	r3, [r7, #11]
          break;
 800800e:	e055      	b.n	80080bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	7c12      	ldrb	r2, [r2, #16]
 8008028:	f107 0108 	add.w	r1, r7, #8
 800802c:	4610      	mov	r0, r2
 800802e:	4798      	blx	r3
 8008030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008032:	e043      	b.n	80080bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa49 	bl	80084ce <USBD_CtlError>
            err++;
 800803c:	7afb      	ldrb	r3, [r7, #11]
 800803e:	3301      	adds	r3, #1
 8008040:	72fb      	strb	r3, [r7, #11]
          break;
 8008042:	e03b      	b.n	80080bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	7c12      	ldrb	r2, [r2, #16]
 800805c:	f107 0108 	add.w	r1, r7, #8
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008066:	e029      	b.n	80080bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa2f 	bl	80084ce <USBD_CtlError>
            err++;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	3301      	adds	r3, #1
 8008074:	72fb      	strb	r3, [r7, #11]
          break;
 8008076:	e021      	b.n	80080bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7c12      	ldrb	r2, [r2, #16]
 8008090:	f107 0108 	add.w	r1, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809a:	e00f      	b.n	80080bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa15 	bl	80084ce <USBD_CtlError>
            err++;
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	3301      	adds	r3, #1
 80080a8:	72fb      	strb	r3, [r7, #11]
          break;
 80080aa:	e007      	b.n	80080bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa0d 	bl	80084ce <USBD_CtlError>
          err++;
 80080b4:	7afb      	ldrb	r3, [r7, #11]
 80080b6:	3301      	adds	r3, #1
 80080b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80080ba:	e038      	b.n	800812e <USBD_GetDescriptor+0x286>
 80080bc:	e037      	b.n	800812e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7c1b      	ldrb	r3, [r3, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d109      	bne.n	80080da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ce:	f107 0208 	add.w	r2, r7, #8
 80080d2:	4610      	mov	r0, r2
 80080d4:	4798      	blx	r3
 80080d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080d8:	e029      	b.n	800812e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f9f6 	bl	80084ce <USBD_CtlError>
        err++;
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	3301      	adds	r3, #1
 80080e6:	72fb      	strb	r3, [r7, #11]
      break;
 80080e8:	e021      	b.n	800812e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	7c1b      	ldrb	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10d      	bne.n	800810e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	f107 0208 	add.w	r2, r7, #8
 80080fe:	4610      	mov	r0, r2
 8008100:	4798      	blx	r3
 8008102:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	2207      	movs	r2, #7
 800810a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800810c:	e00f      	b.n	800812e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f9dc 	bl	80084ce <USBD_CtlError>
        err++;
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	3301      	adds	r3, #1
 800811a:	72fb      	strb	r3, [r7, #11]
      break;
 800811c:	e007      	b.n	800812e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f9d4 	bl	80084ce <USBD_CtlError>
      err++;
 8008126:	7afb      	ldrb	r3, [r7, #11]
 8008128:	3301      	adds	r3, #1
 800812a:	72fb      	strb	r3, [r7, #11]
      break;
 800812c:	bf00      	nop
  }

  if (err != 0U)
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11c      	bne.n	800816e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008134:	893b      	ldrh	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d011      	beq.n	800815e <USBD_GetDescriptor+0x2b6>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00d      	beq.n	800815e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88da      	ldrh	r2, [r3, #6]
 8008146:	893b      	ldrh	r3, [r7, #8]
 8008148:	4293      	cmp	r3, r2
 800814a:	bf28      	it	cs
 800814c:	4613      	movcs	r3, r2
 800814e:	b29b      	uxth	r3, r3
 8008150:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008152:	893b      	ldrh	r3, [r7, #8]
 8008154:	461a      	mov	r2, r3
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fa22 	bl	80085a2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	88db      	ldrh	r3, [r3, #6]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa79 	bl	800865e <USBD_CtlSendStatus>
 800816c:	e000      	b.n	8008170 <USBD_GetDescriptor+0x2c8>
    return;
 800816e:	bf00      	nop
    }
  }
}
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop

08008178 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	889b      	ldrh	r3, [r3, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d130      	bne.n	80081ec <USBD_SetAddress+0x74>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	88db      	ldrh	r3, [r3, #6]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d12c      	bne.n	80081ec <USBD_SetAddress+0x74>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	885b      	ldrh	r3, [r3, #2]
 8008196:	2b7f      	cmp	r3, #127	; 0x7f
 8008198:	d828      	bhi.n	80081ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d104      	bne.n	80081ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f98b 	bl	80084ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	e01d      	b.n	80081f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7bfa      	ldrb	r2, [r7, #15]
 80081be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fe4e 	bl	8008e68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa46 	bl	800865e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e0:	e009      	b.n	80081f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ea:	e004      	b.n	80081f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f96d 	bl	80084ce <USBD_CtlError>
  }
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	4b41      	ldr	r3, [pc, #260]	; (8008318 <USBD_SetConfig+0x118>)
 8008212:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008214:	4b40      	ldr	r3, [pc, #256]	; (8008318 <USBD_SetConfig+0x118>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d904      	bls.n	8008226 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f955 	bl	80084ce <USBD_CtlError>
 8008224:	e075      	b.n	8008312 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822c:	2b02      	cmp	r3, #2
 800822e:	d002      	beq.n	8008236 <USBD_SetConfig+0x36>
 8008230:	2b03      	cmp	r3, #3
 8008232:	d023      	beq.n	800827c <USBD_SetConfig+0x7c>
 8008234:	e062      	b.n	80082fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008236:	4b38      	ldr	r3, [pc, #224]	; (8008318 <USBD_SetConfig+0x118>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01a      	beq.n	8008274 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800823e:	4b36      	ldr	r3, [pc, #216]	; (8008318 <USBD_SetConfig+0x118>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2203      	movs	r2, #3
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008250:	4b31      	ldr	r3, [pc, #196]	; (8008318 <USBD_SetConfig+0x118>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff f9e7 	bl	800762a <USBD_SetClassConfig>
 800825c:	4603      	mov	r3, r0
 800825e:	2b02      	cmp	r3, #2
 8008260:	d104      	bne.n	800826c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f932 	bl	80084ce <USBD_CtlError>
            return;
 800826a:	e052      	b.n	8008312 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f9f6 	bl	800865e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008272:	e04e      	b.n	8008312 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f9f2 	bl	800865e <USBD_CtlSendStatus>
        break;
 800827a:	e04a      	b.n	8008312 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800827c:	4b26      	ldr	r3, [pc, #152]	; (8008318 <USBD_SetConfig+0x118>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d112      	bne.n	80082aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800828c:	4b22      	ldr	r3, [pc, #136]	; (8008318 <USBD_SetConfig+0x118>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008296:	4b20      	ldr	r3, [pc, #128]	; (8008318 <USBD_SetConfig+0x118>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff f9e3 	bl	8007668 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9db 	bl	800865e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082a8:	e033      	b.n	8008312 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80082aa:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <USBD_SetConfig+0x118>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d01d      	beq.n	80082f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff f9d1 	bl	8007668 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <USBD_SetConfig+0x118>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082d0:	4b11      	ldr	r3, [pc, #68]	; (8008318 <USBD_SetConfig+0x118>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff f9a7 	bl	800762a <USBD_SetClassConfig>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d104      	bne.n	80082ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f8f2 	bl	80084ce <USBD_CtlError>
            return;
 80082ea:	e012      	b.n	8008312 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9b6 	bl	800865e <USBD_CtlSendStatus>
        break;
 80082f2:	e00e      	b.n	8008312 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9b2 	bl	800865e <USBD_CtlSendStatus>
        break;
 80082fa:	e00a      	b.n	8008312 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f8e5 	bl	80084ce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008304:	4b04      	ldr	r3, [pc, #16]	; (8008318 <USBD_SetConfig+0x118>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff f9ac 	bl	8007668 <USBD_ClrClassConfig>
        break;
 8008310:	bf00      	nop
    }
  }
}
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000200 	.word	0x20000200

0800831c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d004      	beq.n	8008338 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f8cc 	bl	80084ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008336:	e022      	b.n	800837e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833e:	2b02      	cmp	r3, #2
 8008340:	dc02      	bgt.n	8008348 <USBD_GetConfig+0x2c>
 8008342:	2b00      	cmp	r3, #0
 8008344:	dc03      	bgt.n	800834e <USBD_GetConfig+0x32>
 8008346:	e015      	b.n	8008374 <USBD_GetConfig+0x58>
 8008348:	2b03      	cmp	r3, #3
 800834a:	d00b      	beq.n	8008364 <USBD_GetConfig+0x48>
 800834c:	e012      	b.n	8008374 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3308      	adds	r3, #8
 8008358:	2201      	movs	r2, #1
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f920 	bl	80085a2 <USBD_CtlSendData>
        break;
 8008362:	e00c      	b.n	800837e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	2201      	movs	r2, #1
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f918 	bl	80085a2 <USBD_CtlSendData>
        break;
 8008372:	e004      	b.n	800837e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f8a9 	bl	80084ce <USBD_CtlError>
        break;
 800837c:	bf00      	nop
}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008396:	3b01      	subs	r3, #1
 8008398:	2b02      	cmp	r3, #2
 800839a:	d81e      	bhi.n	80083da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	88db      	ldrh	r3, [r3, #6]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d004      	beq.n	80083ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f891 	bl	80084ce <USBD_CtlError>
        break;
 80083ac:	e01a      	b.n	80083e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f043 0202 	orr.w	r2, r3, #2
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	330c      	adds	r3, #12
 80083ce:	2202      	movs	r2, #2
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f8e5 	bl	80085a2 <USBD_CtlSendData>
      break;
 80083d8:	e004      	b.n	80083e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f876 	bl	80084ce <USBD_CtlError>
      break;
 80083e2:	bf00      	nop
  }
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	885b      	ldrh	r3, [r3, #2]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d106      	bne.n	800840c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f929 	bl	800865e <USBD_CtlSendStatus>
  }
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008424:	3b01      	subs	r3, #1
 8008426:	2b02      	cmp	r3, #2
 8008428:	d80b      	bhi.n	8008442 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	885b      	ldrh	r3, [r3, #2]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d10c      	bne.n	800844c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f90f 	bl	800865e <USBD_CtlSendStatus>
      }
      break;
 8008440:	e004      	b.n	800844c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f842 	bl	80084ce <USBD_CtlError>
      break;
 800844a:	e000      	b.n	800844e <USBD_ClrFeature+0x3a>
      break;
 800844c:	bf00      	nop
  }
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781a      	ldrb	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	785a      	ldrb	r2, [r3, #1]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	3302      	adds	r3, #2
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b29a      	uxth	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	3303      	adds	r3, #3
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	021b      	lsls	r3, r3, #8
 8008482:	b29b      	uxth	r3, r3
 8008484:	4413      	add	r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	3304      	adds	r3, #4
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b29a      	uxth	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	3305      	adds	r3, #5
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	b29b      	uxth	r3, r3
 80084a0:	4413      	add	r3, r2
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	3306      	adds	r3, #6
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	3307      	adds	r3, #7
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	4413      	add	r3, r2
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	80da      	strh	r2, [r3, #6]

}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr

080084ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80084d8:	2180      	movs	r1, #128	; 0x80
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fc5a 	bl	8008d94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fc56 	bl	8008d94 <USBD_LL_StallEP>
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d032      	beq.n	800856c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f834 	bl	8008574 <USBD_GetLen>
 800850c:	4603      	mov	r3, r0
 800850e:	3301      	adds	r3, #1
 8008510:	b29b      	uxth	r3, r3
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	75fa      	strb	r2, [r7, #23]
 8008520:	461a      	mov	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4413      	add	r3, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	7812      	ldrb	r2, [r2, #0]
 800852a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	75fa      	strb	r2, [r7, #23]
 8008532:	461a      	mov	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4413      	add	r3, r2
 8008538:	2203      	movs	r2, #3
 800853a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800853c:	e012      	b.n	8008564 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	60fa      	str	r2, [r7, #12]
 8008544:	7dfa      	ldrb	r2, [r7, #23]
 8008546:	1c51      	adds	r1, r2, #1
 8008548:	75f9      	strb	r1, [r7, #23]
 800854a:	4611      	mov	r1, r2
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	440a      	add	r2, r1
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	75fa      	strb	r2, [r7, #23]
 800855a:	461a      	mov	r2, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4413      	add	r3, r2
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e8      	bne.n	800853e <USBD_GetString+0x4e>
    }
  }
}
 800856c:	bf00      	nop
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008580:	e005      	b.n	800858e <USBD_GetLen+0x1a>
  {
    len++;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	3301      	adds	r3, #1
 8008586:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3301      	adds	r3, #1
 800858c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1f5      	bne.n	8008582 <USBD_GetLen+0xe>
  }

  return len;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	4613      	mov	r3, r2
 80085ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085b8:	88fa      	ldrh	r2, [r7, #6]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80085be:	88fa      	ldrh	r2, [r7, #6]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085c4:	88fb      	ldrh	r3, [r7, #6]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	2100      	movs	r1, #0
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fc6b 	bl	8008ea6 <USBD_LL_Transmit>

  return USBD_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	4613      	mov	r3, r2
 80085e6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	2100      	movs	r1, #0
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 fc59 	bl	8008ea6 <USBD_LL_Transmit>

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	4613      	mov	r3, r2
 800860a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2203      	movs	r2, #3
 8008610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008614:	88fa      	ldrh	r2, [r7, #6]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fc5e 	bl	8008eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	4613      	mov	r3, r2
 8008646:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	2100      	movs	r1, #0
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 fc4c 	bl	8008eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2204      	movs	r2, #4
 800866a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800866e:	2300      	movs	r3, #0
 8008670:	2200      	movs	r2, #0
 8008672:	2100      	movs	r1, #0
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc16 	bl	8008ea6 <USBD_LL_Transmit>

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2205      	movs	r2, #5
 8008690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008694:	2300      	movs	r3, #0
 8008696:	2200      	movs	r2, #0
 8008698:	2100      	movs	r1, #0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fc26 	bl	8008eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086b0:	2200      	movs	r2, #0
 80086b2:	4912      	ldr	r1, [pc, #72]	; (80086fc <MX_USB_DEVICE_Init+0x50>)
 80086b4:	4812      	ldr	r0, [pc, #72]	; (8008700 <MX_USB_DEVICE_Init+0x54>)
 80086b6:	f7fe ff5e 	bl	8007576 <USBD_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086c0:	f7f8 f8b4 	bl	800082c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086c4:	490f      	ldr	r1, [pc, #60]	; (8008704 <MX_USB_DEVICE_Init+0x58>)
 80086c6:	480e      	ldr	r0, [pc, #56]	; (8008700 <MX_USB_DEVICE_Init+0x54>)
 80086c8:	f7fe ff80 	bl	80075cc <USBD_RegisterClass>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086d2:	f7f8 f8ab 	bl	800082c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086d6:	490c      	ldr	r1, [pc, #48]	; (8008708 <MX_USB_DEVICE_Init+0x5c>)
 80086d8:	4809      	ldr	r0, [pc, #36]	; (8008700 <MX_USB_DEVICE_Init+0x54>)
 80086da:	f7fe feb1 	bl	8007440 <USBD_CDC_RegisterInterface>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086e4:	f7f8 f8a2 	bl	800082c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086e8:	4805      	ldr	r0, [pc, #20]	; (8008700 <MX_USB_DEVICE_Init+0x54>)
 80086ea:	f7fe ff88 	bl	80075fe <USBD_Start>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086f4:	f7f8 f89a 	bl	800082c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086f8:	bf00      	nop
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	2000012c 	.word	0x2000012c
 8008700:	200005f0 	.word	0x200005f0
 8008704:	20000018 	.word	0x20000018
 8008708:	2000011c 	.word	0x2000011c

0800870c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008710:	2200      	movs	r2, #0
 8008712:	4905      	ldr	r1, [pc, #20]	; (8008728 <CDC_Init_FS+0x1c>)
 8008714:	4805      	ldr	r0, [pc, #20]	; (800872c <CDC_Init_FS+0x20>)
 8008716:	f7fe fea9 	bl	800746c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800871a:	4905      	ldr	r1, [pc, #20]	; (8008730 <CDC_Init_FS+0x24>)
 800871c:	4803      	ldr	r0, [pc, #12]	; (800872c <CDC_Init_FS+0x20>)
 800871e:	f7fe febe 	bl	800749e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008722:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008724:	4618      	mov	r0, r3
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000c9c 	.word	0x20000c9c
 800872c:	200005f0 	.word	0x200005f0
 8008730:	200008b4 	.word	0x200008b4

08008734 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008738:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800873a:	4618      	mov	r0, r3
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr
	...

08008744 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	6039      	str	r1, [r7, #0]
 800874e:	71fb      	strb	r3, [r7, #7]
 8008750:	4613      	mov	r3, r2
 8008752:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b23      	cmp	r3, #35	; 0x23
 8008758:	d84a      	bhi.n	80087f0 <CDC_Control_FS+0xac>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <CDC_Control_FS+0x1c>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	080087f1 	.word	0x080087f1
 8008764:	080087f1 	.word	0x080087f1
 8008768:	080087f1 	.word	0x080087f1
 800876c:	080087f1 	.word	0x080087f1
 8008770:	080087f1 	.word	0x080087f1
 8008774:	080087f1 	.word	0x080087f1
 8008778:	080087f1 	.word	0x080087f1
 800877c:	080087f1 	.word	0x080087f1
 8008780:	080087f1 	.word	0x080087f1
 8008784:	080087f1 	.word	0x080087f1
 8008788:	080087f1 	.word	0x080087f1
 800878c:	080087f1 	.word	0x080087f1
 8008790:	080087f1 	.word	0x080087f1
 8008794:	080087f1 	.word	0x080087f1
 8008798:	080087f1 	.word	0x080087f1
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	080087f1 	.word	0x080087f1
 80087a4:	080087f1 	.word	0x080087f1
 80087a8:	080087f1 	.word	0x080087f1
 80087ac:	080087f1 	.word	0x080087f1
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	080087f1 	.word	0x080087f1
 80087b8:	080087f1 	.word	0x080087f1
 80087bc:	080087f1 	.word	0x080087f1
 80087c0:	080087f1 	.word	0x080087f1
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	080087f1 	.word	0x080087f1
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f1 	.word	0x080087f1
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087f1 	.word	0x080087f1
 80087dc:	080087f1 	.word	0x080087f1
 80087e0:	080087f1 	.word	0x080087f1
 80087e4:	080087f1 	.word	0x080087f1
 80087e8:	080087f1 	.word	0x080087f1
 80087ec:	080087f1 	.word	0x080087f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80087f0:	bf00      	nop
  }

  return (USBD_OK);
 80087f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop

08008800 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	4808      	ldr	r0, [pc, #32]	; (8008830 <CDC_Receive_FS+0x30>)
 800880e:	f7fe fe46 	bl	800749e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008812:	4807      	ldr	r0, [pc, #28]	; (8008830 <CDC_Receive_FS+0x30>)
 8008814:	f7fe fe85 	bl	8007522 <USBD_CDC_ReceivePacket>

  CDC_Receive_Callback(Buf, Len[0]);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7f7 fea2 	bl	8000568 <CDC_Receive_Callback>

  return (USBD_OK);
 8008824:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200005f0 	.word	0x200005f0

08008834 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008844:	4b0d      	ldr	r3, [pc, #52]	; (800887c <CDC_Transmit_FS+0x48>)
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008856:	2301      	movs	r3, #1
 8008858:	e00b      	b.n	8008872 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800885a:	887b      	ldrh	r3, [r7, #2]
 800885c:	461a      	mov	r2, r3
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4806      	ldr	r0, [pc, #24]	; (800887c <CDC_Transmit_FS+0x48>)
 8008862:	f7fe fe03 	bl	800746c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008866:	4805      	ldr	r0, [pc, #20]	; (800887c <CDC_Transmit_FS+0x48>)
 8008868:	f7fe fe2c 	bl	80074c4 <USBD_CDC_TransmitPacket>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200005f0 	.word	0x200005f0

08008880 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2212      	movs	r2, #18
 8008890:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008892:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20000148 	.word	0x20000148

080088a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2204      	movs	r2, #4
 80088b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088b6:	4b03      	ldr	r3, [pc, #12]	; (80088c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	2000015c 	.word	0x2000015c

080088c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d105      	bne.n	80088e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	4907      	ldr	r1, [pc, #28]	; (80088fc <USBD_FS_ProductStrDescriptor+0x34>)
 80088de:	4808      	ldr	r0, [pc, #32]	; (8008900 <USBD_FS_ProductStrDescriptor+0x38>)
 80088e0:	f7ff fe06 	bl	80084f0 <USBD_GetString>
 80088e4:	e004      	b.n	80088f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	4904      	ldr	r1, [pc, #16]	; (80088fc <USBD_FS_ProductStrDescriptor+0x34>)
 80088ea:	4805      	ldr	r0, [pc, #20]	; (8008900 <USBD_FS_ProductStrDescriptor+0x38>)
 80088ec:	f7ff fe00 	bl	80084f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20001084 	.word	0x20001084
 8008900:	080091c0 	.word	0x080091c0

08008904 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	6039      	str	r1, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	4904      	ldr	r1, [pc, #16]	; (8008924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008914:	4804      	ldr	r0, [pc, #16]	; (8008928 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008916:	f7ff fdeb 	bl	80084f0 <USBD_GetString>
  return USBD_StrDesc;
 800891a:	4b02      	ldr	r3, [pc, #8]	; (8008924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20001084 	.word	0x20001084
 8008928:	080091d8 	.word	0x080091d8

0800892c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	6039      	str	r1, [r7, #0]
 8008936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	221a      	movs	r2, #26
 800893c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800893e:	f000 f843 	bl	80089c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008942:	4b02      	ldr	r3, [pc, #8]	; (800894c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	20000160 	.word	0x20000160

08008950 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d105      	bne.n	800896e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	4907      	ldr	r1, [pc, #28]	; (8008984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008966:	4808      	ldr	r0, [pc, #32]	; (8008988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008968:	f7ff fdc2 	bl	80084f0 <USBD_GetString>
 800896c:	e004      	b.n	8008978 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	4904      	ldr	r1, [pc, #16]	; (8008984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008972:	4805      	ldr	r0, [pc, #20]	; (8008988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008974:	f7ff fdbc 	bl	80084f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008978:	4b02      	ldr	r3, [pc, #8]	; (8008984 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20001084 	.word	0x20001084
 8008988:	080091ec 	.word	0x080091ec

0800898c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d105      	bne.n	80089aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	4907      	ldr	r1, [pc, #28]	; (80089c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089a2:	4808      	ldr	r0, [pc, #32]	; (80089c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089a4:	f7ff fda4 	bl	80084f0 <USBD_GetString>
 80089a8:	e004      	b.n	80089b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4904      	ldr	r1, [pc, #16]	; (80089c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089ae:	4805      	ldr	r0, [pc, #20]	; (80089c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089b0:	f7ff fd9e 	bl	80084f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089b4:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20001084 	.word	0x20001084
 80089c4:	080091f8 	.word	0x080091f8

080089c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089ce:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <Get_SerialNum+0x44>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <Get_SerialNum+0x48>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089da:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <Get_SerialNum+0x4c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d009      	beq.n	8008a02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089ee:	2208      	movs	r2, #8
 80089f0:	4909      	ldr	r1, [pc, #36]	; (8008a18 <Get_SerialNum+0x50>)
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f814 	bl	8008a20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089f8:	2204      	movs	r2, #4
 80089fa:	4908      	ldr	r1, [pc, #32]	; (8008a1c <Get_SerialNum+0x54>)
 80089fc:	68b8      	ldr	r0, [r7, #8]
 80089fe:	f000 f80f 	bl	8008a20 <IntToUnicode>
  }
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	1ffff7e8 	.word	0x1ffff7e8
 8008a10:	1ffff7ec 	.word	0x1ffff7ec
 8008a14:	1ffff7f0 	.word	0x1ffff7f0
 8008a18:	20000162 	.word	0x20000162
 8008a1c:	20000172 	.word	0x20000172

08008a20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]
 8008a36:	e027      	b.n	8008a88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	0f1b      	lsrs	r3, r3, #28
 8008a3c:	2b09      	cmp	r3, #9
 8008a3e:	d80b      	bhi.n	8008a58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	0f1b      	lsrs	r3, r3, #28
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	440b      	add	r3, r1
 8008a50:	3230      	adds	r2, #48	; 0x30
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	e00a      	b.n	8008a6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	0f1b      	lsrs	r3, r3, #28
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4619      	mov	r1, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	440b      	add	r3, r1
 8008a68:	3237      	adds	r2, #55	; 0x37
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	3301      	adds	r3, #1
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	3301      	adds	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
 8008a88:	7dfa      	ldrb	r2, [r7, #23]
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d3d3      	bcc.n	8008a38 <IntToUnicode+0x18>
  }
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr

08008a9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a0d      	ldr	r2, [pc, #52]	; (8008ae0 <HAL_PCD_MspInit+0x44>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d113      	bne.n	8008ad6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008aae:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <HAL_PCD_MspInit+0x48>)
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	4a0c      	ldr	r2, [pc, #48]	; (8008ae4 <HAL_PCD_MspInit+0x48>)
 8008ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ab8:	61d3      	str	r3, [r2, #28]
 8008aba:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <HAL_PCD_MspInit+0x48>)
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2100      	movs	r1, #0
 8008aca:	2014      	movs	r0, #20
 8008acc:	f7f8 fc75 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ad0:	2014      	movs	r0, #20
 8008ad2:	f7f8 fc8e 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	40005c00 	.word	0x40005c00
 8008ae4:	40021000 	.word	0x40021000

08008ae8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7fe fdc5 	bl	800768e <USBD_LL_SetupStage>
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	440b      	add	r3, r1
 8008b2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	4619      	mov	r1, r3
 8008b36:	f7fe fdf7 	bl	8007728 <USBD_LL_DataOutStage>
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008b54:	78fa      	ldrb	r2, [r7, #3]
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	440b      	add	r3, r1
 8008b62:	333c      	adds	r3, #60	; 0x3c
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	78fb      	ldrb	r3, [r7, #3]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f7fe fe4e 	bl	800780a <USBD_LL_DataInStage>
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe ff5e 	bl	8007a46 <USBD_LL_SOF>
}
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d001      	beq.n	8008baa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ba6:	f7f7 fe41 	bl	800082c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bb0:	7bfa      	ldrb	r2, [r7, #15]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe ff0e 	bl	80079d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fe fec7 	bl	8007954 <USBD_LL_Reset>
}
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe ff08 	bl	80079f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <HAL_PCD_SuspendCallback+0x30>)
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	4a03      	ldr	r2, [pc, #12]	; (8008c00 <HAL_PCD_SuspendCallback+0x30>)
 8008bf2:	f043 0306 	orr.w	r3, r3, #6
 8008bf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	e000ed00 	.word	0xe000ed00

08008c04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe ff02 	bl	8007a1c <USBD_LL_Resume>
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008c28:	4a28      	ldr	r2, [pc, #160]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a26      	ldr	r2, [pc, #152]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008c38:	4b24      	ldr	r3, [pc, #144]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c3a:	4a25      	ldr	r2, [pc, #148]	; (8008cd0 <USBD_LL_Init+0xb0>)
 8008c3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008c3e:	4b23      	ldr	r3, [pc, #140]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c40:	2208      	movs	r2, #8
 8008c42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008c44:	4b21      	ldr	r3, [pc, #132]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c46:	2202      	movs	r2, #2
 8008c48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008c4a:	4b20      	ldr	r3, [pc, #128]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008c50:	4b1e      	ldr	r3, [pc, #120]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c56:	4b1d      	ldr	r3, [pc, #116]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c5c:	481b      	ldr	r0, [pc, #108]	; (8008ccc <USBD_LL_Init+0xac>)
 8008c5e:	f7f8 fd97 	bl	8001790 <HAL_PCD_Init>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008c68:	f7f7 fde0 	bl	800082c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c72:	2318      	movs	r3, #24
 8008c74:	2200      	movs	r2, #0
 8008c76:	2100      	movs	r1, #0
 8008c78:	f7fa fa0d 	bl	8003096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c82:	2358      	movs	r3, #88	; 0x58
 8008c84:	2200      	movs	r2, #0
 8008c86:	2180      	movs	r1, #128	; 0x80
 8008c88:	f7fa fa05 	bl	8003096 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c92:	23c0      	movs	r3, #192	; 0xc0
 8008c94:	2200      	movs	r2, #0
 8008c96:	2181      	movs	r1, #129	; 0x81
 8008c98:	f7fa f9fd 	bl	8003096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ca2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2101      	movs	r1, #1
 8008caa:	f7fa f9f4 	bl	8003096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2182      	movs	r1, #130	; 0x82
 8008cbc:	f7fa f9eb 	bl	8003096 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20001284 	.word	0x20001284
 8008cd0:	40005c00 	.word	0x40005c00

08008cd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f8 fe5b 	bl	80019a6 <HAL_PCD_Start>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 f94e 	bl	8008f98 <USBD_Get_USB_Status>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	461a      	mov	r2, r3
 8008d18:	4603      	mov	r3, r0
 8008d1a:	70fb      	strb	r3, [r7, #3]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70bb      	strb	r3, [r7, #2]
 8008d20:	4613      	mov	r3, r2
 8008d22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d32:	78bb      	ldrb	r3, [r7, #2]
 8008d34:	883a      	ldrh	r2, [r7, #0]
 8008d36:	78f9      	ldrb	r1, [r7, #3]
 8008d38:	f7f8 ffd5 	bl	8001ce6 <HAL_PCD_EP_Open>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f928 	bl	8008f98 <USBD_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	4611      	mov	r1, r2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f9 f81c 	bl	8001db2 <HAL_PCD_EP_Close>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f909 	bl	8008f98 <USBD_Get_USB_Status>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f9 f8dc 	bl	8001f70 <HAL_PCD_EP_SetStall>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f8ea 	bl	8008f98 <USBD_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f9 f91d 	bl	8002030 <HAL_PCD_EP_ClrStall>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f8cb 	bl	8008f98 <USBD_Get_USB_Status>
 8008e02:	4603      	mov	r3, r0
 8008e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	da0c      	bge.n	8008e46 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	440b      	add	r3, r1
 8008e40:	3302      	adds	r3, #2
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	e00b      	b.n	8008e5e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e4c:	68f9      	ldr	r1, [r7, #12]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	440b      	add	r3, r1
 8008e58:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008e5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	4611      	mov	r1, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7f8 ff08 	bl	8001c9c <HAL_PCD_SetAddress>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f880 	bl	8008f98 <USBD_Get_USB_Status>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b086      	sub	sp, #24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	72fb      	strb	r3, [r7, #11]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ec8:	893b      	ldrh	r3, [r7, #8]
 8008eca:	7af9      	ldrb	r1, [r7, #11]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	f7f9 f80c 	bl	8001eea <HAL_PCD_EP_Transmit>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f85d 	bl	8008f98 <USBD_Get_USB_Status>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ee2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	607a      	str	r2, [r7, #4]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	460b      	mov	r3, r1
 8008efa:	72fb      	strb	r3, [r7, #11]
 8008efc:	4613      	mov	r3, r2
 8008efe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f0e:	893b      	ldrh	r3, [r7, #8]
 8008f10:	7af9      	ldrb	r1, [r7, #11]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	f7f8 ff95 	bl	8001e42 <HAL_PCD_EP_Receive>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f83a 	bl	8008f98 <USBD_Get_USB_Status>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f28:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f44:	78fa      	ldrb	r2, [r7, #3]
 8008f46:	4611      	mov	r1, r2
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7f8 ffb7 	bl	8001ebc <HAL_PCD_EP_GetRxCount>
 8008f4e:	4603      	mov	r3, r0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f60:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <USBD_static_malloc+0x14>)
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bc80      	pop	{r7}
 8008f6a:	4770      	bx	lr
 8008f6c:	20000204 	.word	0x20000204

08008f70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]

}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bc80      	pop	{r7}
 8008f80:	4770      	bx	lr

08008f82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr

08008f98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d817      	bhi.n	8008fdc <USBD_Get_USB_Status+0x44>
 8008fac:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <USBD_Get_USB_Status+0x1c>)
 8008fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb2:	bf00      	nop
 8008fb4:	08008fc5 	.word	0x08008fc5
 8008fb8:	08008fcb 	.word	0x08008fcb
 8008fbc:	08008fd1 	.word	0x08008fd1
 8008fc0:	08008fd7 	.word	0x08008fd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc8:	e00b      	b.n	8008fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fce:	e008      	b.n	8008fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd4:	e005      	b.n	8008fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fda:	e002      	b.n	8008fe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe0:	bf00      	nop
  }
  return usb_status;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bc80      	pop	{r7}
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop

08008ff0 <atoi>:
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	f000 b8c6 	b.w	8009184 <strtol>

08008ff8 <__errno>:
 8008ff8:	4b01      	ldr	r3, [pc, #4]	; (8009000 <__errno+0x8>)
 8008ffa:	6818      	ldr	r0, [r3, #0]
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	2000017c 	.word	0x2000017c

08009004 <__libc_init_array>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	2600      	movs	r6, #0
 8009008:	4d0c      	ldr	r5, [pc, #48]	; (800903c <__libc_init_array+0x38>)
 800900a:	4c0d      	ldr	r4, [pc, #52]	; (8009040 <__libc_init_array+0x3c>)
 800900c:	1b64      	subs	r4, r4, r5
 800900e:	10a4      	asrs	r4, r4, #2
 8009010:	42a6      	cmp	r6, r4
 8009012:	d109      	bne.n	8009028 <__libc_init_array+0x24>
 8009014:	f000 f8c0 	bl	8009198 <_init>
 8009018:	2600      	movs	r6, #0
 800901a:	4d0a      	ldr	r5, [pc, #40]	; (8009044 <__libc_init_array+0x40>)
 800901c:	4c0a      	ldr	r4, [pc, #40]	; (8009048 <__libc_init_array+0x44>)
 800901e:	1b64      	subs	r4, r4, r5
 8009020:	10a4      	asrs	r4, r4, #2
 8009022:	42a6      	cmp	r6, r4
 8009024:	d105      	bne.n	8009032 <__libc_init_array+0x2e>
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	f855 3b04 	ldr.w	r3, [r5], #4
 800902c:	4798      	blx	r3
 800902e:	3601      	adds	r6, #1
 8009030:	e7ee      	b.n	8009010 <__libc_init_array+0xc>
 8009032:	f855 3b04 	ldr.w	r3, [r5], #4
 8009036:	4798      	blx	r3
 8009038:	3601      	adds	r6, #1
 800903a:	e7f2      	b.n	8009022 <__libc_init_array+0x1e>
 800903c:	0800931c 	.word	0x0800931c
 8009040:	0800931c 	.word	0x0800931c
 8009044:	0800931c 	.word	0x0800931c
 8009048:	08009320 	.word	0x08009320

0800904c <memcpy>:
 800904c:	440a      	add	r2, r1
 800904e:	4291      	cmp	r1, r2
 8009050:	f100 33ff 	add.w	r3, r0, #4294967295
 8009054:	d100      	bne.n	8009058 <memcpy+0xc>
 8009056:	4770      	bx	lr
 8009058:	b510      	push	{r4, lr}
 800905a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800905e:	4291      	cmp	r1, r2
 8009060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009064:	d1f9      	bne.n	800905a <memcpy+0xe>
 8009066:	bd10      	pop	{r4, pc}

08009068 <memset>:
 8009068:	4603      	mov	r3, r0
 800906a:	4402      	add	r2, r0
 800906c:	4293      	cmp	r3, r2
 800906e:	d100      	bne.n	8009072 <memset+0xa>
 8009070:	4770      	bx	lr
 8009072:	f803 1b01 	strb.w	r1, [r3], #1
 8009076:	e7f9      	b.n	800906c <memset+0x4>

08009078 <_strtol_l.isra.0>:
 8009078:	2b01      	cmp	r3, #1
 800907a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907e:	4686      	mov	lr, r0
 8009080:	d001      	beq.n	8009086 <_strtol_l.isra.0+0xe>
 8009082:	2b24      	cmp	r3, #36	; 0x24
 8009084:	d906      	bls.n	8009094 <_strtol_l.isra.0+0x1c>
 8009086:	f7ff ffb7 	bl	8008ff8 <__errno>
 800908a:	2316      	movs	r3, #22
 800908c:	6003      	str	r3, [r0, #0]
 800908e:	2000      	movs	r0, #0
 8009090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009094:	468c      	mov	ip, r1
 8009096:	4e3a      	ldr	r6, [pc, #232]	; (8009180 <_strtol_l.isra.0+0x108>)
 8009098:	4660      	mov	r0, ip
 800909a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800909e:	5da5      	ldrb	r5, [r4, r6]
 80090a0:	f015 0508 	ands.w	r5, r5, #8
 80090a4:	d1f8      	bne.n	8009098 <_strtol_l.isra.0+0x20>
 80090a6:	2c2d      	cmp	r4, #45	; 0x2d
 80090a8:	d133      	bne.n	8009112 <_strtol_l.isra.0+0x9a>
 80090aa:	f04f 0801 	mov.w	r8, #1
 80090ae:	f89c 4000 	ldrb.w	r4, [ip]
 80090b2:	f100 0c02 	add.w	ip, r0, #2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d05d      	beq.n	8009176 <_strtol_l.isra.0+0xfe>
 80090ba:	2b10      	cmp	r3, #16
 80090bc:	d10c      	bne.n	80090d8 <_strtol_l.isra.0+0x60>
 80090be:	2c30      	cmp	r4, #48	; 0x30
 80090c0:	d10a      	bne.n	80090d8 <_strtol_l.isra.0+0x60>
 80090c2:	f89c 0000 	ldrb.w	r0, [ip]
 80090c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80090ca:	2858      	cmp	r0, #88	; 0x58
 80090cc:	d14e      	bne.n	800916c <_strtol_l.isra.0+0xf4>
 80090ce:	2310      	movs	r3, #16
 80090d0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80090d4:	f10c 0c02 	add.w	ip, ip, #2
 80090d8:	2500      	movs	r5, #0
 80090da:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80090de:	3f01      	subs	r7, #1
 80090e0:	fbb7 f9f3 	udiv	r9, r7, r3
 80090e4:	4628      	mov	r0, r5
 80090e6:	fb03 7a19 	mls	sl, r3, r9, r7
 80090ea:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80090ee:	2e09      	cmp	r6, #9
 80090f0:	d818      	bhi.n	8009124 <_strtol_l.isra.0+0xac>
 80090f2:	4634      	mov	r4, r6
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	dd24      	ble.n	8009142 <_strtol_l.isra.0+0xca>
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	db1f      	blt.n	800913c <_strtol_l.isra.0+0xc4>
 80090fc:	4581      	cmp	r9, r0
 80090fe:	d31d      	bcc.n	800913c <_strtol_l.isra.0+0xc4>
 8009100:	d101      	bne.n	8009106 <_strtol_l.isra.0+0x8e>
 8009102:	45a2      	cmp	sl, r4
 8009104:	db1a      	blt.n	800913c <_strtol_l.isra.0+0xc4>
 8009106:	2501      	movs	r5, #1
 8009108:	fb00 4003 	mla	r0, r0, r3, r4
 800910c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009110:	e7eb      	b.n	80090ea <_strtol_l.isra.0+0x72>
 8009112:	2c2b      	cmp	r4, #43	; 0x2b
 8009114:	bf08      	it	eq
 8009116:	f89c 4000 	ldrbeq.w	r4, [ip]
 800911a:	46a8      	mov	r8, r5
 800911c:	bf08      	it	eq
 800911e:	f100 0c02 	addeq.w	ip, r0, #2
 8009122:	e7c8      	b.n	80090b6 <_strtol_l.isra.0+0x3e>
 8009124:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009128:	2e19      	cmp	r6, #25
 800912a:	d801      	bhi.n	8009130 <_strtol_l.isra.0+0xb8>
 800912c:	3c37      	subs	r4, #55	; 0x37
 800912e:	e7e1      	b.n	80090f4 <_strtol_l.isra.0+0x7c>
 8009130:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009134:	2e19      	cmp	r6, #25
 8009136:	d804      	bhi.n	8009142 <_strtol_l.isra.0+0xca>
 8009138:	3c57      	subs	r4, #87	; 0x57
 800913a:	e7db      	b.n	80090f4 <_strtol_l.isra.0+0x7c>
 800913c:	f04f 35ff 	mov.w	r5, #4294967295
 8009140:	e7e4      	b.n	800910c <_strtol_l.isra.0+0x94>
 8009142:	2d00      	cmp	r5, #0
 8009144:	da08      	bge.n	8009158 <_strtol_l.isra.0+0xe0>
 8009146:	2322      	movs	r3, #34	; 0x22
 8009148:	4638      	mov	r0, r7
 800914a:	f8ce 3000 	str.w	r3, [lr]
 800914e:	2a00      	cmp	r2, #0
 8009150:	d09e      	beq.n	8009090 <_strtol_l.isra.0+0x18>
 8009152:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009156:	e007      	b.n	8009168 <_strtol_l.isra.0+0xf0>
 8009158:	f1b8 0f00 	cmp.w	r8, #0
 800915c:	d000      	beq.n	8009160 <_strtol_l.isra.0+0xe8>
 800915e:	4240      	negs	r0, r0
 8009160:	2a00      	cmp	r2, #0
 8009162:	d095      	beq.n	8009090 <_strtol_l.isra.0+0x18>
 8009164:	2d00      	cmp	r5, #0
 8009166:	d1f4      	bne.n	8009152 <_strtol_l.isra.0+0xda>
 8009168:	6011      	str	r1, [r2, #0]
 800916a:	e791      	b.n	8009090 <_strtol_l.isra.0+0x18>
 800916c:	2430      	movs	r4, #48	; 0x30
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1b2      	bne.n	80090d8 <_strtol_l.isra.0+0x60>
 8009172:	2308      	movs	r3, #8
 8009174:	e7b0      	b.n	80090d8 <_strtol_l.isra.0+0x60>
 8009176:	2c30      	cmp	r4, #48	; 0x30
 8009178:	d0a3      	beq.n	80090c2 <_strtol_l.isra.0+0x4a>
 800917a:	230a      	movs	r3, #10
 800917c:	e7ac      	b.n	80090d8 <_strtol_l.isra.0+0x60>
 800917e:	bf00      	nop
 8009180:	08009219 	.word	0x08009219

08009184 <strtol>:
 8009184:	4613      	mov	r3, r2
 8009186:	460a      	mov	r2, r1
 8009188:	4601      	mov	r1, r0
 800918a:	4802      	ldr	r0, [pc, #8]	; (8009194 <strtol+0x10>)
 800918c:	6800      	ldr	r0, [r0, #0]
 800918e:	f7ff bf73 	b.w	8009078 <_strtol_l.isra.0>
 8009192:	bf00      	nop
 8009194:	2000017c 	.word	0x2000017c

08009198 <_init>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr

080091a4 <_fini>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr
